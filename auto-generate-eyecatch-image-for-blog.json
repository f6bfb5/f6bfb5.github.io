{"title":"自動產生部落格預覽圖片","slug":"auto-generate-eyecatch-image-for-blog","html":"<p>例如 <a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/\">Qiita</a> 或 <a target=\"_blank\" rel=\"nofollow\" href=\"https://hatenablog.com/\">Hatena Blog</a>，現在許多網站都能在預覽時的縮圖上顯示對應文章的標題，而這實際上到底是怎麼做到的？我很大幅度（或者說幾乎全部）參考了 <a target=\"_blank\" rel=\"nofollow\" href=\"https://shuheikagawa.com/blog/2019/10/13/generating-twitter-card-images/\">Generating Twitter Card images from blog post titles</a> 這篇文章的做法，使用 Node.js 的 canvas library 直接在 canvas 上畫好預覽圖，存成檔案後，再設定好相關檔案的對應路徑，就能替網站文章加上預覽圖。</p>\n<h2 id=\"處理步驟\">處理步驟</h2>\n<h3 id=\"1-取得文章資訊\">1. 取得文章資訊</h3>\n<p>要產生圖片，首先得要有文章的標題或相關資訊，Sapper 的 Blog 樣板提供了一支 <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/Charca/sapper-blog-template/blob/master/src/utils/markdown.js\">markdown.js</a> 處理前置的檔案匯入與 meta 資訊的產生，故只需再多加上縮圖用的 meta 資訊，並從此傳入相關資訊至生成 function 即可：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// another utility JavaScript file, will be described after</span>\n<span class=\"token keyword\">const</span> createTitleImage <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src/utils/title-image.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">md<span class=\"token punctuation\">,</span> id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// markdown file content</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> rawContent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">matter</span><span class=\"token punctuation\">(</span>md<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> date <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// image meta info placeholder</span>\n    <span class=\"token keyword\">let</span> image <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// if had set custom image then don't generate</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">)</span> image <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// if not set custom image then generate it</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// generate canvas</span>\n        <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">createTitleImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          title<span class=\"token punctuation\">,</span>\n          subtitle<span class=\"token operator\">:</span> <span class=\"token string\">\"f6bfb5.github.io\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// save canvas to file</span>\n        <span class=\"token keyword\">const</span> imagePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./static/preview/\"</span><span class=\"token punctuation\">,</span> slug <span class=\"token operator\">+</span> <span class=\"token string\">\".png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./static/preview/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./static/preview/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>imagePath<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// set image meta info</span>\n        image <span class=\"token operator\">=</span> <span class=\"token string\">\"https://f6bfb5.github.io/preview/\"</span> <span class=\"token operator\">+</span> slug <span class=\"token operator\">+</span> <span class=\"token string\">\".png\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// add image to meta info</span>\n    <span class=\"token keyword\">const</span> exportFromModule <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> title <span class=\"token operator\">||</span> slug<span class=\"token punctuation\">,</span>\n      slug<span class=\"token punctuation\">,</span>\n      html<span class=\"token punctuation\">,</span>\n      date<span class=\"token punctuation\">,</span>\n      excerpt<span class=\"token punctuation\">,</span>\n      printDate<span class=\"token punctuation\">,</span>\n      printReadingTime<span class=\"token punctuation\">,</span>\n      tags<span class=\"token punctuation\">,</span>\n      image<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"2-產生圖片\">2. 產生圖片</h3>\n<p>上方提及的文章作者也提供了自己的程式碼 <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/shuhei/shuhei.github.com/blob/f30cb5cd85a4ef35a4fb73d94a01da44e03ae116/plugins/title-image.js\">title-image.js</a>，非常感激地只更改了裡頭的字體後完全借用，使用前也需注意是否已安裝 <code>node-canvas</code>，若無則需先 <code>npm i canvas</code>。</p>\n<h3 id=\"3-存為檔案\">3. 存為檔案</h3>\n<p><code>title-image.js</code> 回傳的是 Buffer object，因此需要再使用 <code>fs</code> 存為檔案，這部分的程式碼也已寫在第 1 步 <code>else</code> 的部分裡，這邊傳入文章別名作為檔案名稱，並檢查目標資料夾是否存在﹐若是如遠端推播環境則另行產生，最後使用 <code>writeFileSync</code> 存入檔案。</p>\n<h3 id=\"4-設定-meta-tag\">4. 設定 meta tag</h3>\n<p>有了圖片檔案後，就能將路徑傳進文章樣板裡的對應 meta 裡，同樣的，Sapper 的 <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/Charca/sapper-blog-template/blob/master/src/routes/blog/%5Bslug%5D.svelte\">Blog 文章樣板</a>也附上了社群網站用的 meta tag，只需加入第 1 步新增的縮圖 meta 資訊即可。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params<span class=\"token punctuation\">,</span> query <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// will get data and meta info from markdown files</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> post<span class=\"token operator\">:</span> data <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- ... --></span>\n<span class=\"token comment\">&lt;!-- add image meta info --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{post.image}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre><p>完成！</p>\n<h2 id=\"改善點\">改善點</h2>\n<p>雖然看來原本也有考慮到日文標題的情況，目前看來一些太長的標題還是會全縮在同一行導致字變得太小，發生文字無法妥善分行的狀況，也有像這篇另外使用了文字型態分析 library 解決這個問題，以及整體的配色或配置考量，都是日後首要的改善點。</p>\n","date":"2021-08-26T15:26:19.000Z","printDate":"August 26, 2021","printReadingTime":"2 min read","tags":["F2E"],"image":"https://f6bfb5.github.io/preview/auto-generate-eyecatch-image-for-blog.png"}