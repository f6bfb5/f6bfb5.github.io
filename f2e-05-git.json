{"title":"前端筆記 (5) Git","slug":"f2e-05-git","html":"<h2 id=\"git-簡介\">Git 簡介</h2>\n<ul>\n<li>Git 是由 Linus Torvalds 為了管理 Linux 原始碼所寫的分散式版控系統</li>\n<li>有三種檔案區域，並透過指令將檔案移至不同的區域</li>\n</ul>\n<ol>\n<li>「工作目錄（Working Directory）」</li>\n<li>「暫存區（Staging Area）」</li>\n<li>「儲存庫（Repository）」</li>\n</ol>\n<ul>\n<li>有四種 File State 檔案狀態</li>\n</ul>\n<ol>\n<li><code>Untracked</code> 新增檔案</li>\n<li><code>New</code>: 加入暫存區後</li>\n<li><code>Modified</code>: 修改後</li>\n<li><code>Deleted</code>: 刪除後</li>\n</ol>\n<h2 id=\"what-is-github？\">What is GitHub？</h2>\n<p>與 Git 一同很常聽到的，還有 GitHub 與 GitLab，這兩者則是提供 Git 服務的網路平台，除了可將程式碼儲存於上頭外，也有獨自額外的輔助功能，例如 Pull Request（後述）或是 GitHub Actions 等等。</p>\n<h2 id=\"工具安裝\">工具安裝</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"git-scm.com/downloads\">Git Client</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://pepese.github.io/blog/mac-dev-environment/\">Mac</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/ryuichi1208/items/45fd2cdd865097a7ad3d\">Git 使うのに便利な CLI ツール</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.gitignore.io/\">gitignore.io - Create Useful .gitignore Files For Your Project</a></li>\n</ul>\n<h3 id=\"vscode-插件\">VSCode 插件</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\">GitLens</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory\">Git History</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github\">Github Pull Request</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore\">gitignore</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://marketplace.visualstudio.com/items?itemName=felipecaputo.git-project-manager\">Git Project Manager</a></li>\n</ul>\n<h3 id=\"平台服務\">平台服務</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/\">GitHub</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://gitlab.com/\">GitLab</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://dashboard.heroku.com/apps\">Heroku</a></li>\n</ul>\n<h3 id=\"指令速見表\">指令速見表</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/kozzy/items/b42ba59a8bac190a16ab\">Git でよく使われるコマンドにイラストによる説明を加えて 1 枚のチートシートにまとめてみた</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"http://scars377.github.io/git-cheatsheet-cht/\">Git Cheatsheet Cht</a></li>\n</ul>\n<h2 id=\"指令\">指令</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://learngitbranching.js.org/?locale=zh_TW\">Learn Git Branching</a></li>\n</ul>\n<h3 id=\"初始\">初始</h3>\n<h4 id=\"1-git-config\">1. <code>git config</code></h4>\n<ul>\n<li>建構 Git 相關設定<ul>\n<li><code>git config --global user.name &quot;&quot;</code>\n<br/>設定使用者名稱</li>\n<li><code>git config --global user.email &quot;&quot;</code>\n<br/>設定使用者帳號</li>\n<li><code>git config --global -l</code>\n<br/>查看目前的設定內容<ul>\n<li><code>-l</code> 為 <code>--list</code> 的簡碼</li>\n<li>亦可參照根目錄底下的 <code>.gitconfig</code> 檔</li>\n</ul>\n</li>\n<li><code>--local</code> 參數套用於單獨 project 上時會優於 <code>--global</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-git-init\">2. <code>git init</code></h4>\n<ul>\n<li>建立 local repository</li>\n<li>在該工作目錄建立 <code>.git</code> 資料夾，開始使用 Git 做版控</li>\n</ul>\n<h4 id=\"3-git-remote\">3. <code>git remote</code></h4>\n<ul>\n<li>查看／註冊遠端數據庫 remote repository 的設定<ul>\n<li><code>git remote -v</code>\n<br/>顯示遠端 repo 連結</li>\n<li><code>git remote add [remote_name] [git_url]</code>\n<br/>新增遠端 repo\n<br/>e.g. <code>git remote add origin http://github.com/f6bfb5/Sample.git</code></li>\n<li><code>origin</code>、<code>upstream</code> 為常見的遠端數據庫名稱別名，亦可更改為其它名稱\n<br/>遠端 repo 會以 <code>[remote_name]/[branch]</code> 的格式顯示\n<br/>此例下 Remote Repository 的 master 分支就會是 <code>origin/master</code></li>\n<li><code>git remote set-url origin git://new.url.here</code>\n<br/>修改 remote 位置</li>\n<li><code>git remote remove origin</code>\n<br/>刪除 remote</li>\n<li><code>git push -u origin master</code>\n<br/>更新資料至遠端 master 分支\n<br/><code>-u</code> 等同於 <code>--set-upstream</code>\n<br/>意為將此遠端數據庫服務設為追蹤指定的遠端分支</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"設定\">設定</h3>\n<h4 id=\"1-git-config-1\">1. <code>git config</code></h4>\n<ul>\n<li>建構 Git 相關設定</li>\n<li>proxy 設定<ul>\n<li><code>git config --global http.proxy http://[FQDN]:[PORT]</code></li>\n<li><code>git config --global https.proxy http://proxy.example.com:8080</code></li>\n<li>e.g.\n<br/><code>git config --global http.proxy http://[ID]:[Password]@[FQDN]:[PORT]</code>\n<br/><code>git config --global https.proxy http://[ID]:[Password]@[FQDN]:[PORT]</code></li>\n<li><code>git config --global url.&quot;https://&quot;.insteadOf git://</code></li>\n</ul>\n</li>\n<li>內容設定<ul>\n<li><code>git config --global core.autocrlf false</code>\n<br/>將 Windows 環境的換行代碼轉換為 CR+LF</li>\n<li><code>git config --global alias.[alias_command] [git_command]</code>\n<br/>設定指令快捷<ul>\n<li>e.g. <code>git config --global alias.co checkout</code></li>\n<li>co=checkout, br=branch, ci=commit, st=status</li>\n<li>若想執行外部指令，而非 git 底下的指令，\n<br/>需要在指令的開頭加上 <code>!</code> 字元\n<br/>e.g. <code>git config --global alias.visual &#39;!gitk&#39;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://bardoloi.com/blog/2015/10/29/git-aliases/\">Git productivity with aliasing and multiple commands</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/SugarShootingStar/items/64f239f89d25a3b9f520\">[git] gitconfig で会社用アカウントと個人用アカウントを楽に使い分けする</a></li>\n</ul>\n<h3 id=\"提交\">提交</h3>\n<h4 id=\"1-git-add\">1. <code>git add</code></h4>\n<ul>\n<li>將 Working Repository 的檔案變更儲存至 Staging Area<ul>\n<li><code>git add .</code>\n<br/>將該目錄及其子目錄下所有異動放入暫存區</li>\n<li><code>git add --all</code>\n<br/>將整個 Git 版控範圍異動放入暫存區</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-git-commit\">2. <code>git commit</code></h4>\n<ul>\n<li>將檔案從 Staging Area（暫存區） commit 到 Local Repository（本地儲存庫）\n<br>需要使用 <code>-m</code> 參數記述備註，並會分配一個 commit ID<ul>\n<li><code>git commit -m &quot;Commit 說明&quot;</code></li>\n<li><code>git commit --amend -m &quot;修改後的 Commit 訊息&quot;</code>\n<br/>修改最後一次 Commit 訊息\n<br/>（實則是撤掉前一次 Commit 重發一次，SHA1 不同）</li>\n<li><code>git commit -am &quot;commit message&quot;</code>\n<br/>commit 已跟蹤過的文件</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-git-push\">3. <code>git push</code></h4>\n<ul>\n<li>將 Local Repository 本地儲存庫的異動 commit 到 Remote Repository 遠端儲存庫<ul>\n<li><code>git push [remote_repo] [local_branch]</code>\n<br/>e.g. <code>git push origin master</code></li>\n<li><code>git push [remote_repo] [source_branch]:[destination_branch]</code>\n<br/>推送至不同的 branch</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-git-rm-filename---cached\">4. <code>git rm [filename] --cached</code></h4>\n<ul>\n<li>將檔案轉為 untracked，即 stop tracking</li>\n</ul>\n<h3 id=\"狀態\">狀態</h3>\n<h4 id=\"1-git-status\">1. <code>git status</code></h4>\n<ul>\n<li>查看目前的變更狀態<ul>\n<li><code>Untracked files:</code>\n<br/>不存在 Local Repository 和 Staging Area，\n<br/>只存在 Working Directory 裡的檔案</li>\n<li><code>Changes not staged for commit:</code>\n<br/>之前已存在於 Local Repository 和 Staging Area 裡的檔案</li>\n<li><code>Changes to be commited</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-git-diff-file_name\">2. <code>git diff [file_name]</code></h4>\n<ul>\n<li>比較 Staging Area 和 Local Repository 的檔案內容差異<ul>\n<li><code>git diff [branch_name] [branch_name]</code>\n<br/>比較兩者 branch 之間的差異</li>\n<li><code>git diff master origin/master</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-git-log\">3. <code>git log</code></h4>\n<ul>\n<li>檢視提交歷史紀錄，從上至下由新到舊<ul>\n<li><code>git log --all --decorate --oneline --graph</code>\n<br/>圖形化展示歷史紀錄</li>\n<li><code>git config --global alias.dog log --all --decorate --oneline --graph</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-git-reflog\">4. <code>git reflog</code></h4>\n<ul>\n<li>檢視詳細提交紀錄（查看 reset 歷程，找到被拆掉的 commit）</li>\n</ul>\n<h4 id=\"5-git-show-commit_id\">5. <code>git show [commit_id]</code></h4>\n<ul>\n<li>檢視提交紀錄內容</li>\n</ul>\n<h4 id=\"6-git-tag-tag_name-commit_id\">6. <code>git tag [tag_name] [commit_id]</code></h4>\n<ul>\n<li>設定錨定點</li>\n</ul>\n<h4 id=\"7-git-describe-ref\">7. <code>git describe [ref]</code></h4>\n<ul>\n<li><code>ref</code> 可為 <code>branch</code> 或 <code>commit-id</code></li>\n<li>尋找 <code>ref</code> 最近的錨定點</li>\n<li>若未指定 <code>ref</code> 會以當前位置（<code>HEAD</code>）為準</li>\n</ul>\n<h3 id=\"分支\">分支</h3>\n<h4 id=\"1-git-branch\">1. <code>git branch</code></h4>\n<ul>\n<li>顯示分支一覽，當前分支的前方會有 <code>*</code><ul>\n<li><code>git branch [branch_name]</code>\n<br/>建立新的分支</li>\n<li><code>git branch -d [branch_name]</code>\n<br/>刪除本地端的分支</li>\n<li><code>git branch -r</code>\n<br/>查看遠端 repo 的分支</li>\n<li><code>git branch -a</code>\n<br/>查看所有分支</li>\n<li><code>git branch [branch_name]/[revision]</code>\n<br/>切換至指定分支的特定版本</li>\n<li><code>git branch -f main HEAD^3</code></li>\n<li><code>git branch -u [remote_branch] [local_branch]</code>\n<br/><code>git branch -u o/main foo</code>\n<br/>已經位於該本地分支則可省略 <code>[local_branch]</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-git-push-remote_repo-branch_name\">2. <code>git push [remote_repo] :[branch_name]</code></h4>\n<ul>\n<li>刪除遠端的分支</li>\n<li>※在欲刪除的遠端分支名稱前有個 <code>:</code>、使用的指令是 <code>push</code></li>\n</ul>\n<h4 id=\"3-git-checkout-branch_name\">3. <code>git checkout [branch_name]</code></h4>\n<ul>\n<li>切換至指定的分支\n<br>Working Directory 也會變更成指定的分支狀態<ul>\n<li><code>git checkout -b [branch_name]</code>\n<br/>建立新的分支，並切換至該分支</li>\n<li><code>git checkout [branch_name] .</code>\n<br/>將當前分支的所有檔案複製至指定分支（※在最後方有一個 <code>.</code>）</li>\n</ul>\n</li>\n<li><code>checkout</code> 也可以用於切換至不同的 HEAD<ul>\n<li>HEAD：指向當前 checkout 的 commit 的 reference，即目前所在的 commit</li>\n<li><code>git checkout [commit SHA-1]</code>\n<br/>由於 SHA-1 通常很長，也可以只輸入前幾個字元</li>\n<li><code>git checkout main^</code>\n<br/>切換至 main 的上個版本<ul>\n<li><code>^</code> 代表前一個版本，<code>~5</code> 則代表 5 個之前的版本</li>\n<li>如果有多個母分支（如 merge 過後），可用 <code>^2</code> 指定</li>\n<li><code>^</code> 和 <code>~</code> 可以組合使用，如 <code>git checkout HEAD~^2~2</code></li>\n</ul>\n</li>\n<li><code>git checkout HEAD^</code>\n<br/>也可將 <code>HEAD</code> 用於相對引用</li>\n</ul>\n</li>\n<li>兩者也可組合，建立新的分支並將分支指向某個 HEAD<ul>\n<li><code>git checkout -b [branch_name] [commit SHA-1]</code>\n<br/>e.g. <code>git checkout -b feature C2</code>\n<br/>建立 feature 分支並切換至該分支，之後再將分支 HEAD 指向 C2</li>\n<li><code>git checkout -b [local_branch] [remote_branch]</code>\n<br/>也可以用來指向不同的 remote branch\n<br/>e.g. <code>git checkout -b totallyNotMain o/main</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-git-stash-save-message\">4. <code>git stash [save [&#39;message]]</code></h4>\n<ul>\n<li>暫時儲存目前變更的內容，但不進行 commit</li>\n<li>預設省略 <code>save</code>，亦可加上以註記 <code>stash</code> 的內容為何</li>\n<li>通常用於需跳至其他 branch 時<ul>\n<li><code>git stash apply [stash@{n}]</code></li>\n<li><code>git stash pop [stash@{n}]</code>\n<br/>復原保存於 <code>stash</code> 的作業內容</li>\n</ul>\n</li>\n<li>可於參數指定想回復何次的 <code>stash</code>，省略時預設為最新的 <code>stash@{0}</code></li>\n<li><code>apply</code> 復原後不會取消 <code>stash</code>，<code>pop</code> 復原後會取消 <code>stash</code><ul>\n<li><code>git stash show [stash@{n}]</code>\n<br/>顯示指定的 <code>stash</code> 內容</li>\n<li><code>git stash list</code>\n<br/>顯示目前儲存的 <code>stash</code> 一覽</li>\n<li><code>git stash drop [stash@{n}]</code>\n<br/>刪除指定的 <code>stash</code></li>\n<li><code>git stash clear</code>\n<br/>刪除所有 <code>stash</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"合併\">合併</h3>\n<h4 id=\"1-git-merge-branch_name\">1. <code>git merge [branch_name]</code></h4>\n<ul>\n<li>將 <code>指定分支</code> 的檔案修改合併至 <code>當前分支</code>\n<br>合併兩個分支操作，紀錄兩者之間的實際操作\n<br>預設時使用 <code>fast-forward</code> 方式合併，不會產生新的 commit<ul>\n<li><code>git merge [branch] --no-ff</code>\n<br/>合併時產生新的 commit，用以確保主要分支線圖乾淨</li>\n<li><code>git merge [branch] --squash</code>\n<br/>合併後僅保留一次 commit 紀錄</li>\n<li><code>git merge [remote_resository]/[branch_name]</code>\n<br>將從 <code>git fetch</code> 取得的 Remote Repository 的變更\n<br>反應至 Local Repository 裡目前的 branch</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-git-rebase-target_branch\">2. <code>git rebase [target_branch]</code></h4>\n<ul>\n<li>複製當前分支做的修改，到目標分支的最後一次提交上面\n<br>會將指定分支的歷史紀錄併進 master 的線圖上，用以確保整體分支線圖乾淨</li>\n<li>即把當前 branch 的 HEAD 修改為指定 branch 的（無參數的情況下）最後一個 commit</li>\n<li>由於這個動作過程會再做一次 commit，也會改變目標分支的 commit id，需謹慎使用</li>\n<li><code>git rebase -i HEAD~4</code><ul>\n<li>開啟互動式編輯視窗（Interactive 模式）</li>\n</ul>\n</li>\n<li><code>git rebase caption main</code><ul>\n<li>等同於 <code>git checkout main</code> -&gt; <code>git rebase caption</code>？</li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.slideshare.net/WillHuangTW/git-merge-rebase\">git merge 與 rebase 的觀念與實務應用</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/shira-shun/items/29c7f36179117022cb6d\">rebase をちゃんと理解して使えるようになろう！ - Qiita</a></li>\n</ul>\n<h4 id=\"3-git-cherry-pick-commit_id\">3. <code>git cherry-pick [commit_id]</code></h4>\n<ul>\n<li>任意挑選一個或多個 commit 複製並接到目前位置（<code>HEAD</code>）的下面</li>\n<li>可以避免 rebase 操作過多時可能的 rebase conflict</li>\n</ul>\n<h4 id=\"4-git-clone-git_url\">4. <code>git clone [git_url]</code></h4>\n<ul>\n<li>複製 <code>遠端 repo</code> 至本地端<ul>\n<li><code>git clone --mirror</code></li>\n<li><code>cd C:\\Git\\GitHub</code></li>\n<li><code>git clone https://github.com/f6bfb5/Sample.git</code>\n<br/>clone 遠端工作目錄至本地端</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-git-fetch\">5. <code>git fetch</code></h4>\n<ul>\n<li>將 <code>遠端 repo</code> 的最新變更加入至 <code>本地 repo</code><ul>\n<li><code>git fetch --prune</code>\n<br/>執行 fetch 之前，刪除遠端庫裡不存在的 repo</li>\n<li>但 <code>fetch</code> 不會更動本地的 commit</li>\n</ul>\n</li>\n<li><code>fetch</code> 也可以指定抓取特定 branch 的變更<ul>\n<li><code>git fetch origin foo</code></li>\n<li>同樣的，<code>fetch</code> 不會更動本地的 commit</li>\n<li>也可與 <code>pull</code> 同樣透過 <code>:</code> 指定特定本地 branch<ul>\n<li><code>git fetch [remote_repo] [remote_branch]:[local_branch]</code>\n<br/>e.g. <code>git fetch origin foo~1:bar</code>\n<br/>將遠端 foo branch 到前一次的 commit 內容 fetch 至 bar branch</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>git push [remote_repo] :[branch_name]</code> 會刪除遠端 branch<ul>\n<li>同樣地，<code>git fetch [remote_repo] :[branch_name]</code> 則會增加一個本地 branch</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-git-pull\">6. <code>git pull</code></h4>\n<ul>\n<li>將 <code>遠端 repo</code> 的最新變更加入至 <code>本地 repo</code> 後，合併本地 commit</li>\n<li>等同 <code>git fetch</code> + <code>git merge origin/master</code></li>\n<li><code>git pull --rebase</code>\n<br/> 加上 <code>--rebase</code> 則等同 <code>git fetch</code> + <code>git rebase</code></li>\n<li><code>git pull [remote_repo] [branch_name]</code><ul>\n<li>= <code>git fetch [remote_repo] [branch_name]: git merge o/[branch_name]</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"衝突\">衝突</h4>\n<ul>\n<li><code>git mergetool</code>\n<br/>開啟編輯工具，介面左邊為當前分支，右邊為目標分支，中間為原始檔案</li>\n</ul>\n<h3 id=\"撤銷\">撤銷</h3>\n<h4 id=\"1-git-clean\">1. <code>git clean</code></h4>\n<h4 id=\"2-git-rm-file_name\">2. <code>git rm [file_name]</code></h4>\n<h4 id=\"3-git-commit---amend--m-commit-message\">3. <code>git commit --amend -m &quot;commit message&quot;</code></h4>\n<ul>\n<li>撤掉前一次 commit 重發一次，SHA1 會不同<ul>\n<li><code>git commit --amend --no-edit</code>\n<br/>沿用原 commit 訊息</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-git-reset-commit_id\">4. <code>git reset [commit_id]</code></h4>\n<ul>\n<li>完全撤銷修改至某次 commit\n<br>若省略 <code>[commit_id]</code> 則會自動指定為 <code>HEAD</code><ul>\n<li><code>git reset --hard HEAD^</code>\n<br/>還原至前個版本</li>\n<li><code>^</code> 代表前一個版本，<code>~5</code> 則代表 5 個之前的版本\n<br><code>--soft</code>：保留暫存區和工作區的檔案\n<br><code>--mixed</code>：捨棄所有暫存區的檔案，但不影響工作區的檔案\n<br><code>--hard</code>：捨棄暫存區和工作區的檔案</li>\n</ul>\n</li>\n<li>對 remote branch 無效，需使用 <code>revert</code></li>\n</ul>\n<h4 id=\"5-git-revert-commit_id\">5. <code>git revert [commit_id]</code></h4>\n<ul>\n<li>撤銷某次 commit，但保留此次之前和之後的 commit 與紀錄</li>\n<li>此次撤銷會成為一次最新的 commit，以修改 remote branch</li>\n</ul>\n<h2 id=\"不想版控的項目\">不想版控的項目</h2>\n<p>建立／編輯 <code>.gitignore</code> 檔案列舉排除不要納入版控的路徑（支援萬用字元 <code>*</code>）</p>\n<pre class=\"language-.gitignore\"><code class=\"language-.gitignore\"># 不加入副檔名為 .exe 的檔案\n*.exe\n# 不加入 .settings 資料夾與其中的檔案\n.settings/\n# 不加入 Bin/bin 資料夾與其中的檔案\n[Bb]in/\n# 不加入特定資料夾裡的特定副檔名檔案\nout/*.log\n\n*.sh</code></pre><p>在修改 .gitignore 前就加入的項目可用 <code>git rm --cached</code> 清除，\n或用 <code>git clean -fx</code> 一口氣清理所有應忽略的檔案</p>\n<h2 id=\"pull-request（pr）\">Pull Request（PR）</h2>\n<p><code>Pull Request</code> 和 <code>fork</code> 同樣是 Github／Bitbucket 上新增的整合功能\n<br>而 <code>fork</code> 是將<strong>他人的</strong>遠端 repo 複製至自己的<strong>遠端 repo</strong>\n<br>以便做出個人版本的內容修改\n<br>不同於 <code>clone</code> 是將<strong>自己的</strong>遠端 repo 複製至<strong>本地端</strong></p>\n<ul>\n<li>PR 指發出一個請求他人 <code>merge</code> 自己在 <code>fork</code> 後做的相關修改內容</li>\n<li>過程為：</li>\n</ul>\n<ol>\n<li><code>fork</code> 專案到自己帳號</li>\n<li><code>clone</code> 到本地修改</li>\n<li><code>push</code> 回自己帳號專案</li>\n<li>發出 PR 給原作者</li>\n<li>原作者收下 PR</li>\n</ol>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://gitbook.tw/chapters/github/pull-request.html\">與其它開發者的互動 - 使用 Pull Request（PR） - 為你自己學 Git | 高見龍</a></li>\n</ul>\n<h2 id=\"使用-ssh-登入\">使用 SSH 登入</h2>\n<ol>\n<li><code>ssh-keygen -t rsa -C &quot;[email]&quot;</code>／<code>ssh-keygen -t rsa -b 4096 -c &quot;[email]&quot;</code>：產生 SSH key</li>\n<li><code>eval &quot;$(ssh-agent -s)&quot;</code>：在後台開啟 SSH agent</li>\n<li><code>ssh-add -K ~/.ssh/id_rsa</code></li>\n<li><code>cat /Users/[user_name]/.ssh/id_rsa.pub</code>：檢視公鑰</li>\n<li>以 GitHub 為例，至 <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/settings/keys\">SSH and GPG keys</a> 點擊 <code>New SSH key</code>，將方才的公鑰貼上</li>\n</ol>\n<h2 id=\"branch-model\">Branch Model</h2>\n<h3 id=\"git-flow\">git-flow</h3>\n<p>由 Driessen 所<a target=\"_blank\" rel=\"nofollow\" href=\"http://keijinsonyaban.blogspot.com/2010/10/a-successful-git-branching-model.html\">發表</a>的一種 git 開發手法，亦或指遵循這套手法所開發的工具\n<br>將專案分為 5 種分支：<code>master</code>、<code>develop</code>、<code>release</code>、<code>feature</code>、<code>hotfix</code></p>\n<h4 id=\"主要分支：master、develop\">主要分支：<code>master</code>、<code>develop</code></h4>\n<ul>\n<li><code>master</code> 分支<ul>\n<li>品質穩定保證可上線的產品主線，多會加上版號 <code>release/1.0</code></li>\n<li>從 <code>release</code> 分支 merge 而來，不可於此分支直接進行作業或 commit</li>\n</ul>\n</li>\n<li><code>develop</code> 分支<ul>\n<li>最新進度的開發主線</li>\n<li>自 <code>master</code> 分支而來，<code>feature</code> 由此分支出去，改好再 merge 進來</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"輔助分支：feature、release、hotfix\">輔助分支：<code>feature</code>、<code>release</code>、<code>hotfix</code></h4>\n<ul>\n<li><code>release</code> 分支<ul>\n<li>開發進度成熟時，分支到 <code>release</code> 做上線前的最後測試</li>\n<li>測試沒問題後 merge 至 <code>master</code> 及 <code>develop</code>，merge 完畢後會刪除該 <code>release</code> 分支</li>\n</ul>\n</li>\n<li><code>feature</code> 分支<ul>\n<li>進行功能追加或修正作業用的分支</li>\n<li>自 <code>develop</code> 分支而來</li>\n<li>通常會將實作功能寫在 <code>feature/</code> 的後方明確化內容，例如 <code>feature/news_feed</code></li>\n<li>作業完成後再 merge（可再加上 <a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/@fcamel/%E4%BD%95%E6%99%82%E8%A9%B2%E7%94%A8-git-merge-no-ff-d765c3a6bef5\"><code>--no-ff</code></a> option 明確化結構）回 <code>develop</code> 分支</li>\n</ul>\n</li>\n<li><code>Hotfix</code> 分支<ul>\n<li>緊急修正內容用</li>\n<li>從 <code>master</code> 分支出來，改完合併回 <code>master</code> 及 <code>develop</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"相關文章\">相關文章</h4>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md\">Git Workflows and Tutorials</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/kuma%E8%80%81%E5%B8%AB%E7%9A%84%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E6%95%99%E5%AE%A4/%E5%9F%BA%E7%A4%8E-git-flow-%E5%B7%A5%E4%BD%9C%E6%B3%95-fa50b1dddc4f\">Git 怎麼這麼難用？Git Flow + 好習慣 = 不再苦惱</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.hellojcc.tw/2017/12/14/the-flaw-of-git-flow/\">git flow 實戰經驗談 part1 - 別再讓 gitflow 拖累團隊的開發速度</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/ohnaka0410/items/7c7fa20710dfd72b7d7a\">git-flow 図解 - Qiita</a></li>\n</ul>\n<h3 id=\"github-flow\">GitHub Flow</h3>\n<p>簡略化過後的 Branch Model\n<br>將專案分為 2 種分支：<code>master</code>、<code>topic</code></p>\n<h4 id=\"master-分支\"><code>master</code> 分支</h4>\n<ul>\n<li>品質穩定保證可上線的產品主線</li>\n<li>等同於 git-flow 中的 <code>master</code> + <code>develop</code></li>\n<li>不可於此分支直接進行作業或 commit</li>\n</ul>\n<h4 id=\"topic-分支\"><code>topic</code> 分支</h4>\n<ul>\n<li>進行功能追加或修正作業用的分支</li>\n<li>自 <code>master</code> 唯一分支出來的 branch</li>\n<li>等同於 git-flow 中的 <code>feature</code> + <code>hotfix</code></li>\n<li>merge 回 <code>master</code> 後會刪除該 <code>topic</code> 分支</li>\n</ul>\n<h2 id=\"commit-message\">commit message</h2>\n<ul>\n<li>風格：Markup syntax、wrap margins、文法、大寫習慣、符號慣例</li>\n<li>內容：<strong>需要</strong>的資訊</li>\n<li>Metadata：可參照的 issue tracking IDs、pull request 號碼</li>\n</ul>\n<h3 id=\"七條規則\">七條規則</h3>\n<ol>\n<li>用一行空白分隔標題與內容</li>\n<li>限制標題最多只有 50 字元</li>\n<li>標題開頭要大寫</li>\n<li>標題不以句點結尾</li>\n<li>以祈使句撰寫標題</li>\n<li>內文每行最多 72 字</li>\n<li>用內文解釋 what 以及 why vs. how</li>\n</ol>\n<h3 id=\"template\">template</h3>\n<pre class=\"language-\"><code class=\"language-\">Header: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>(<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>): <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>subject</span><span class=\"token punctuation\">></span></span>\n - type: 代表 commit 的類別：feat, fix, docs, style, refactor, test, chore，必要欄位\n - scope 代表 commit 影響的範圍，例如資料庫、控制層、模板層等等，視專案不同決定，可選欄位\n - subject 代表此 commit 的簡短描述，不要超過 50 個字元，結尾不要加句號，必要欄位\n\nBody: 72-character wrapped. This should answer:\n - Body 部份是對本次 Commit 的詳細描述，可以分成多行，每一行不要超過 72 個字元\n - 說明程式碼變動的項目與原因，還有與先前行為的對比\n\nFooter:\n - 填寫任務編號（如果有的話）.\n - BREAKING CHANGE（可忽略），記錄不兼容的變動，\n   以 BREAKING CHANGE: 開頭，後面是對變動的描述、以及變動原因和遷移方法</code></pre><h4 id=\"type\">type</h4>\n<ul>\n<li>Feat: 新增／修改功能（feature）</li>\n<li>Fix: 修補 bug（bug fix）</li>\n<li>Docs: 文件（documentation）</li>\n<li>Style: 格式（不影響程式碼運行的變動 white-space, formatting, missing semt colons, etc）</li>\n<li>Refactor: 重構（非新增功能，亦不是修補 bug 的程式碼變動）</li>\n<li>Perf: 改善效能（A code change that improves performance）</li>\n<li>Test: 增加測試（Adding missing tests or correcting existing tests）</li>\n<li>chore: 程式建構或輔助工具變動（maintain）</li>\n<li>revert: 撤銷回覆先前的 commit，例如：<code>revert: type(scope): subject (回覆版本:xxxx)</code></li>\n</ul>\n<h3 id=\"工具\">工具</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/commitizen/cz-cli\">commitizen/cz-cli: The commitizen command line utility.</a></li>\n<li><code>yarn global add commitizen</code> or <code>npm install -g commitizen</code></li>\n</ul>\n<h3 id=\"文章\">文章</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/@kevin940726/write-your-commit-messages-in-the-right-way-65c8e1dfc8a3\">Write your commit messages in the right way - Kai Hao - Medium</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.louie.lu/2017/03/21/%E5%A6%82%E4%BD%95%E5%AF%AB%E4%B8%80%E5%80%8B-git-commit-message/\">如何寫一個 Git Commit Message</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://wadehuanglearning.blogspot.com/2019/05/commit-commit-commit-why-what-commit.html\">Git Commit Message 這樣寫會更好，替專案引入規範與範例</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"http://blog.fourdesire.com/2018/07/03/%E6%92%B0%E5%AF%AB%E6%9C%89%E6%95%88%E7%9A%84-git-commit-message/\">撰寫有效的 Git Commit Message</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/tonluqclml/items/bc63c294dda6010b63e9\">レビュー前に直して欲しい日本語の問題点８つ</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/itosho/items/9565c6ad2ffc24c09364\">Git のコミットメッセージの書き方</a></li>\n</ul>\n<h2 id=\"參考文章\">參考文章</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/shimotaroo/items/b73d896ace10894fd290\">Git でやりたいこと、ここで見つかる - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://pepese.github.io/blog/git-basics/\">Git 入門</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://pepese.github.io/blog/git-commands/\">Git コマンド整理</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://zlargon.gitbooks.io/git-tutorial/content/\">zlargon - Git</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/doggy8088/Learn-Git-in-30-days/tree/master/zh-tw\">30 天精通 Git 版本控管</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.darkthread.net/blog/my-git-cheatsheet/\">我的 Git 指令小抄</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/ashes-note/%E3%84%85-learning-git-2019-cd0a71e061ff\">[筆記]learning-Git-2019</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/gold-kou/items/7f6a3b46e2781b0dd4a0\">いまさらだけど Git を基本から分かりやすくまとめてみた</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/sky0621/items/8b6e88f4327b42ade5d7\">新人ではないが Git 初心者であるエンジニアが「このリポジトリをフォークしてローカルで開発できるようにしておいて！」と言われた時にやること</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/yamamoto7/items/fe15a1e7e360b4015fae\">入門書を終えた人に捧げる、社会人のための Git 中級編 - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/west-hiroaki/items/74cccbc22b2cc7a4aacb\">実務でどんな git コマンドを使っているか振り返ってみる</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/muran001/items/dea2bbbaea1260098051\">Git でやらかした時に使える 19 個の奥義</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://gitbook.tw/chapters/github/delete-remote-branch.html\">【狀況題】怎麼刪除遠端的分支？</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://gitbook.tw/chapters/using-git/reset-commit.html\">【狀況題】剛才的 Commit 後悔了，想要拆掉重做…</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/yukiarrr/items/9c21d97f6c8ac31de157\">git 操作は GUI ツール派な自分も CUI に乗り換えた便利 git 拡張まとめ</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/Nash-BETA/items/0d4e876cf9460778b985\">GitHub でセキュリティ脆弱性のアラートが来てビビりながら対応した話</a></li>\n</ul>\n","date":"2019-07-18T07:05:00.000Z","excerpt":null,"printDate":"July 18, 2019","printReadingTime":"9 min read","tags":["F2E","Git"],"image":"https://f6bfb5.github.io/preview/f2e-05-git.png"}