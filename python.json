{"title":"[編程] Python","slug":"python","html":"<h2 id=\"為什麼-python-的-main-函式要寫成-if-__name__--__main__-？\">為什麼 Python 的 main 函式要寫成 <code>if __name__ == &#39;__main__&#39;:</code> ？</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/suiru_nakamura/items/dca13669abdf29404f38\">python の if __name__ == &#39;__main__&#39;:は何のためにあるのか。 - Qiita</a></li>\n</ul>\n<p>若我們寫了一支沒有 <code>if name == &#39;main&#39;</code> 的 Python 檔案</p>\n<pre class=\"language-python\"><code class=\"language-python\">def main():\n  print (\"Hello\")\n\nmain()</code></pre><p>使用 <code>python hello.py</code> 執行仍然可以正常運作，但在其它檔案作為外部引入 <code>import hello</code> 的時候，也會顯示「Hello」</p>\n<pre class=\"language-python\"><code class=\"language-python\">import hello\n> Hello</code></pre><p>這是因為在 Python 中在引入檔案時，會先執行裡頭的內容，例如這支檔案就會執行 <code>main() =&gt; print(&quot;hello&quot;)</code> 的處理</p>\n<p>所以為了在引入檔案時，不要做出意圖之外的程式行為，才會加上 <code>if name == &#39;main&#39;</code> 的分歧敘文</p>\n<pre class=\"language-python\"><code class=\"language-python\">def main():\n  print(\"Hello\")\n\nif __name__ == \"__main__\":\n  main()</code></pre><p>如此 if 之內的部份在 import 時就不會執行了</p>\n<h3 id=\"背後原因\">背後原因</h3>\n<p>name 是 Python 中的特殊變數，會儲存 Python 的模組名稱，在 <code>import hello</code> 時，<code>hello.py</code> 中的 name 就會被 Python 自動設定為 <code>&#39;hello&#39;</code></p>\n<p>使用 <code>python hello.py</code> 執行時，<code>hello.py</code> 中的 name 就會是於 Python 直接執行檔案時所設定的 <code>&#39;main&#39;</code></p>\n<p>所以 <code>if name == &#39;main&#39;</code> 能夠判別「這支 <code>hello.py</code> 檔案是以 <code>python hello.py</code> 所直接執行的（＝不是經由 import 造成的舉動）」</p>\n<h2 id=\"asyncio\">Asyncio</h2>\n<pre class=\"language-py\"><code class=\"language-py\">import asyncio\n\nasync def main():\n  print('Hello...)\n  await asyncio.sleep(1)\n  print('...World!')\n\nasyncio.run(main())</code></pre><h2 id=\"python-調用-c-dll\">Python 調用 C++ dll</h2>\n<h2 id=\"streamlit\"><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.streamlit.io/\">Streamlit</a></h2>\n<h2 id=\"使用-pyinstaller-封裝-python-程式\">使用 Pyinstaller 封裝 Python 程式</h2>\n<h3 id=\"安裝\">安裝</h3>\n<p><code>pip install pyinstaller</code></p>\n<h3 id=\"封裝\">封裝</h3>\n<ul>\n<li><code>pyinstaller</code></li>\n<li><code>pyi-makespec</code></li>\n<li>封裝成一個資料夾：<code>pyinstaller my-script.py</code></li>\n<li>封裝成一個檔案：<code>pyinstaller --onefile my-script.py</code></li>\n</ul>\n<p>執行程式位於 <code>dist</code> 資料夾裡</p>\n<h2 id=\"資源\">資源</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://openhome.cc/Gossip/Python/\">Python Gossip</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/Saku731/items/52a3bbacd002f26f408e\">Python でゼロからでもサービス開発・公開できる学習ロードマップ</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/@will.wang/%E6%92%A5%E9%96%8B-python-pip-site-packages-%E7%9A%84%E8%97%8D%E8%89%B2%E8%9C%98%E8%9B%9B%E7%B6%B2-90e398bb3785\">撥開 Python, pip, site-packages 的藍色蜘蛛網 💢</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/vinta/awesome-python\">Awesome Python</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.pythonanywhere.com/\">pythonanywhere</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://pipenv.readthedocs.io/en/latest/\">pipenv</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/onelivesleft/PrettyErrors\">onelivesleft/PrettyErrors: Prettify Python exception output to make it legible.</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://iapyeh.readthedocs.io/en/latest/blogs/technical/docs_style_review_twisted.html\">空行讓 Python 更簡潔</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/yinawekuky/items/28d973a653e9825ed582\">Python のコードをきれいに書くコツ</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/KeisukeKakuda/items/ef24baa58ed55967d666\">【まとめ】Python を高高速速で復習する</a></li>\n</ul>\n","date":"2020-02-12T13:23:37.000Z","excerpt":"","printDate":"February 12, 2020","printReadingTime":"2 min read"}