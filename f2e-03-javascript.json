{"title":"前端筆記 (3) JavaScript","slug":"f2e-03-javascript","html":"<h2 id=\"ecmascript\">ECMAScript</h2>\n<ul>\n<li>ECMAScript 的規格於 ECMA 的 TC39 裡制定<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.ecma-international.org/technical-committees/tc39/\">ECMA TC39</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/tc39\">GitHub organization</a></li>\n</ul>\n</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://node.green/\">Node.js ES2015/ES6, ES2016 and ES2017 support</a></li>\n</ul>\n<h2 id=\"javascript\">JavaScript</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://jsprimer.net/#javascript-primer\">JavaScript Primer</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://ja.javascript.info/\">現代の JavaScript チュートリアル</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://openhome.cc/Gossip/ECMAScript/index.html\">語言技術：ECMAScript Essence</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/\">從 ES6 開始的 JavaScript 學習生活</a></li>\n</ul>\n<h2 id=\"現代-js-的常見基礎技術\">現代 JS 的常見基礎技術</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://nodejs.org/en/\">Node.js</a></li>\n<li>Package Manager\n<br>├ npm\n<br>├ Yarn\n<br>└ Bower</li>\n<li>Task Runner / Module Bundler\n<br>├ gulp\n<br>├ Grunt\n<br>├ webpack\n<br>└ Parcel</li>\n<li>Transpiler / Compiler\n<br>└ Babel</li>\n<li>Alt JS\n<br>├ CoffeeScript\n<br>├ TypeScript\n<br>└ PureScript</li>\n<li>Framework / UI Library\n<br>├ React\n<br>├ Vue.js\n<br>├ Angular\n<br>└ Riot.js</li>\n</ul>\n<h2 id=\"撰寫\">撰寫</h2>\n<h3 id=\"變數\">變數</h3>\n<ul>\n<li>case senstive</li>\n<li>首字符可為任意 unicode 或 <code>$</code>、<code>_</code></li>\n<li>第二字符之後除任意 unicode 或 <code>$</code>、<code>_</code> 之外，還可為 <code>0-9</code></li>\n<li>保留字不可用為變數名稱</li>\n</ul>\n<h3 id=\"宣告\">宣告</h3>\n<ul>\n<li><code>var</code> 函式作用域</li>\n<li><code>let</code> 區塊作用域，不可重複宣告</li>\n<li><code>const</code> 區塊作用域，不可重複宣告、不可再次賦值</li>\n</ul>\n<h4 id=\"變數提升-hosting\">變數提升 (Hosting)</h4>\n<p>JavaScript 引擎在解析原始碼時，會先將所有已宣告的變數提升到程式碼的頂部，綁定其所屬作用域但不賦值。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 顯示 undefined</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre><p>因此上述例子的 <code>a</code> 並未宣告與賦值，但在執行上不會報錯。</p>\n<h3 id=\"命名\">命名</h3>\n<ul>\n<li>易於理解的內容名稱</li>\n<li>不過長或過短</li>\n<li>不使用容易混淆的名稱</li>\n<li>開頭使用 <code>_</code> 表示具有特殊意義，非必要不使用</li>\n<li>統一命名風格</li>\n<li>只使用英文命名</li>\n<li>習慣用法如下：\n<br>├ 變數／函式名稱：camelCase\n<br>├ 類別名稱：PascalCase\n<br>└ 常數：全大寫，字詞間用下底線 <code>_</code></li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> numberOfStudents\n<span class=\"token keyword\">const</span> numberOfLegs\n<span class=\"token keyword\">function</span> <span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre><h2 id=\"型別\">型別</h2>\n<p>程式語言裡常見的型別有「動態型別」與「靜態型別」，「靜態型別」語言的變數，於<strong>編譯時</strong>已經確定其型別，\n<br>JavaScript 所屬的動態型別，則是於<strong>執行階段變數賦值後</strong>才會擁有型別。</p>\n<p>Javascript 內建有七大型別：</p>\n<h3 id=\"null（null）\"><code>Null</code>（<code>null</code>）</h3>\n<p>值為空或不存在</p>\n<h3 id=\"undefined（undefined）\"><code>Undefined</code>（<code>undefined</code>）</h3>\n<p>值未被定義、初始值</p>\n<h3 id=\"boolean（true、false）\"><code>Boolean</code>（<code>true</code>、<code>false</code>）</h3>\n<p>布林值</p>\n<h3 id=\"number（整數-1-或浮點數-314）\"><code>Number</code>（整數 <code>1</code> 或浮點數 <code>3.14</code>）</h3>\n<p>能儲存根據 IEE 754-2008 標準所定義的\n<br>範圍於 <code>(2^53 -1)</code> 到 <code>2^53 -1</code> 之間的數字\n<br>另外還有三個符號值： <code>+Infinity</code> 、 <code>-Infinity</code> 、 <code>NaN</code> （Not a Number）\n<br>可以透過 <code>Number.MAX_VALUE</code> 或 <code>Number.MIN_VALUE</code> 兩個常數\n<br>以及在 ES6 新增的 <code>Number.isSafeInteger()</code> 、 <code>Number.MAX_SAFE_INTEGER</code> 、 <code>Number.MIN_SAFE_INTEGER</code>\n<br>來檢查數字是否位於標準範圍之內</p>\n<h3 id=\"string（hello-world）\"><code>String</code>（<code>Hello World</code>）</h3>\n<p>文字，以單括號 <code>&#39;</code> 或雙括號 <code>&quot;</code> 包覆起來的字元</p>\n<h3 id=\"object\"><code>Object</code></h3>\n<p>資料或函式的組合＝ Property\n<br>可由 <code>{鍵 (Key) : 值 (Value)}</code> 或 <code>new Object()</code> 宣告\n<br>可以透過 <code>.Key</code> 或 <code>[&#39;Key&#39;]</code> 存取或操作 <code>Object</code> 裡的 property，刪除則需使用 <code>delete</code>\n<br>除了上述其中三種原始資料型別（ <code>Boolean</code> 、 <code>Number</code> 、 <code>String</code> ）也是 <code>Object</code> 之外\n<br>一些特殊的資料型別例如 <code>Array</code> 、 <code>Date</code> 、 <code>Function</code> 、 <code>RegExp</code> 也都屬於 <code>Object</code></p>\n<h3 id=\"symbol（於-es6-新增）\"><code>Symbol</code>（於 ES6 新增）</h3>\n<p>此類型的值唯一且不可修改\n<br>通常用於做為 Object 的 Key 使用</p>\n<p>以及 <code>BigInt</code> （於 Chrome 67 新增）</p>\n<p>BigInt 則可儲存超過 <code>Number</code> 範圍的值\n<br>於數值後面加上 <code>n</code> 或使用 <code>BigInt()</code> 函式轉型即可\n<br>例如 <code>const bigInt = 123456789012345678901234567890n;</code>\n<br><code>Number</code> 常見的運算子操作都可同樣套用於 <code>BigInt</code> 上\n<br>但 <code>BigInt</code> 類型的值不可與 <code>Number</code> 類型的值進行操作，會造成 <code>TypeError</code> 錯誤</p>\n<h3 id=\"typeof-運算子\"><code>typeof</code> 運算子</h3>\n<p><code>typeof</code> 是能檢視一個值型別的運算子。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token function\">Symble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"symble\"</span></code></pre><p>但是 <code>typeof a</code> 並非詢問 <code>a</code> 變數的型別，而是詢問「目前在 <code>a</code> 中的值的型別是什麼」。JavaScript 的變數單純只是值的容器。</p>\n<p><code>null</code> 的類型是 <code>object</code>，這是由於歷史原因造成的。1995 年的 JavaScript 語言第一版，只設計了五種資料類型（物件、整數、浮點數、字串和布林值），沒考慮 <code>null</code>，只把它當作 <code>object</code> 的一種特殊值。後來 <code>null</code> 獨立出來，作為一種單獨的資料類型，為了兼容以前的代碼，<code>typeof null</code> 傳回 <code>object</code> 就沒法改變了，所以是一個萬年 Bug。</p>\n<p>我們可以利用 <code>null</code> 會被 <code>typeof</code> 檢測為 <code>object</code> 並且會轉為 <code>false</code> 的結果來驗證值是否為 <code>null。</code></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>a <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><h2 id=\"非同步處理\">非同步處理</h2>\n<p>由於 JavaScript 是單執行緒（single-threaded）的同步（synchronous）程式語言，在執行程式時都是以最後結果中由上至下的順序去操作，並且一次只能處理一件事，如果我們中途需要做一個不影響整體後續操作，但會需要非常久時間的事情，JavaScript 就會直接卡死在這邊好一段時間（造成阻塞／blocking 問題），因此有由瀏覽器設計非同步（asynchronous）的相關處理替我們解決這個問題。</p>\n<p>上面提到 JavaScript 是單執行緒，非常概略性地來說，JavaScript 處理非同步的方式是，有一個 <code>call stack</code> 存放<strong>正在執行的工作</strong>，一個 <code>task queue</code>（亦稱 <code>job queue</code>、<code>event queue</code> 或 <code>callback queue</code>）存放<strong>需要等待的非同步工作</strong>，以及瀏覽器所提供 <code>Web APIs</code> 專門用於處理 stack 中的非同步工作，例如常見的 <code>setTimeout</code> 或是與 API 索取資料等等。</p>\n<p><code>Web APIs</code> 會將其移動到 <code>task queue</code> 裡之後，繼續執行下一個工作，當 <code>call stack</code> 裡的工作都執行完畢後，才會開始將 <code>task queue</code> 裡的工作移上來繼續處理，而這個「監看 call stack 是否為空／執行完畢，若是，則丟 callback queue 的工作進去」的行為稱為 <code>event loop</code>。</p>\n<pre class=\"language-mermaid\"><code class=\"language-mermaid\">flowchart TD\n    subgraph CallStack=執行中\n    CST0[非同步工作]-.->CST1\n    CST1[同步工作]-.->CST2\n    CST2[同步工作]\n    end\n\n    subgraph WebAPIs\n    WA0[setTimeout]\n    WA1[AJAX]\n    WA2[Events]\n    end\n\n    subgraph TaskQueue=待執行\n    TQT0[非同步工作]\n    TQT1[非同步工作]-.->TQT0\n    TQT2[非同步工作]-.->TQT1\n    end\n\n    CallStack=執行中--處理非同步工作-->WebAPIs\n    WebAPIs--處理完後會丟到 Task Queue 去-->TaskQueue=待執行\n    TQT0 --當 Call Stack 工作全部結束後才丟上去--> CallStack=執行中</code></pre><p>而關於 <code>event loop</code> 的詳細講解，最多人推薦的就是由 Phillip Robert 在 JSConf 上解說的這支影片了。</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8aGhZQkoFbQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2019/10/05/javascript-async-sync-and-callback/\">JavaScript 中的同步與非同步（上）：先成為 callback 大師吧！</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://5xruby.tw/posts/how-js-synchronous-works/\">無痛理解 JS | 非同步怎麼運作？｜專欄文章｜五倍紅寶石</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://pjchender.blogspot.com/2017/08/javascript-learn-event-loop-stack-queue.html\">[筆記] 理解 JavaScript 中的事件循環、堆疊、佇列和併發模式（Learn event loop, stack, queue, and concurrency mode of JavaScript in depth） ~ PJCHENder&lt;br&gt;那些沒告訴你的小細節</a></li>\n</ul>\n<h3 id=\"callback\">Callback</h3>\n<p>上面很概略地只講了 <code>Web APIs</code> 會負責處理，而 <code>callback</code> 是裡頭一種最常見的概念，當我們有需要接在非同步處理後面做的事情，例如 <code>setTimeout</code> 只有等待時間的部份是非同步、AJAX 只有取得資料的部份是非同步，當時間到了、資料取得了之後，接下來的行為仍然是同步的，就要再寫在一個 function 裡，包在非同步的行為裡面，直到相關的非同步行為結束後，再接著執行這個 function 的行為，這種 function 就稱為 <code>callback function</code>。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// callback function 會包在非同步行為裡</span>\n<span class=\"token comment\">// 當非同步部份處理完後才開始執行</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      num1<span class=\"token operator\">:</span> num1<span class=\"token punctuation\">,</span>\n      num2<span class=\"token operator\">:</span> num2<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    callback\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">success</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> success<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>但當我們有需要一連串相關的非同步處理，多次呼叫 callback function 會造成語法內嵌，使得程式碼難以閱讀和維護，也就是所謂的 callback hell：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> floppy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"floppy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不斷層疊的 callback function 導致難以閱讀和理解</span>\nfloppy<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  floppy<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    floppy<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      floppy<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        floppy<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          floppy<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            floppy<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              floppy<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disk\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// do something...</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"promises\">Promises</h3>\n<p>為了解決 callback hell 的問題，ES2015 實作了 <code>Promise API</code> 提供不同的非同步處理方式，我們可以使用 <code>.then</code> 將原本不斷層疊的連續行為，改寫成段落串接式的寫法，雖然關係上仍然是接連處理，在撰寫和閱讀上有了大幅的差異。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> time <span class=\"token operator\">=</span> <span class=\"token number\">500</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      num <span class=\"token operator\">?</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 成功</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失敗\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p><code>Promise</code> 會帶入 <code>resolve</code> 和 <code>reject</code> 兩個 callback function：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// asynchronous action here</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// resolve 回傳成功時的值</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>success_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// reject 回傳失敗時的值</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>fail_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p><code>Promise</code> 有四種狀態：</p>\n<ol>\n<li><code>pending</code>（擱置）：初始狀態，操作未開始執行</li>\n<li><code>fulfilled</code>（實現）：操作成功完成</li>\n<li><code>rejected</code>（拒絕）：操作失敗</li>\n<li><code>settled</code>（解決）：操作已結束</li>\n</ol>\n<p>當同步操作完成後，<code>resolve</code> 會觸發 fulfilled，執行 <code>.then</code> 之後的行為，失敗時則會由 <code>reject</code> 觸發 rejected，執行 <code>.catch</code> 之後的行為，而這兩個 callback function 也是回傳 promise。</p>\n<p><code>Promise</code> 也可以直接呼叫 <code>resolve</code> 接受某個值或操作，例如必定會如預期的行為，或是來自不同 Promise API 的 promise，亦可呼作 <code>reject</code> 用於偵錯或保持一致性時，拒絕某個值或操作。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>lastStep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>另外還有兩個方法 <code>.race</code> 和 <code>.all</code> 可以使用，這兩者都是傳入一個陣列，<code>.race</code> 是傳入陣列中任何一個 promise 物件解決之後，就會往下執行；<code>.all</code> 則是要傳入陣列中的所有 promise 物件都解決才會往下執行。</p>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://iamian.cc/promise/\">Javascript Promise example 簡易實作模擬 | Ian Chu</a></li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token number\">1337</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3, 1337, \"foo\"]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"async--await\">Async / Await</h3>\n<ul>\n<li>於 ES7 新增</li>\n<li>欲使一 function 回傳 Promise，需於該 function 前加上 <code>async</code></li>\n<li>使用 Promise 或 function 回傳的 Promise 時需使用 <code>await</code>\n<br>└ 如 <code>let phone = await willGetNewPhone</code> 或 <code>let message = await showOff(phone)</code></li>\n<li>可於函式內使用 <code>try {} catch (error) {}</code> 攔截未預期行為或錯誤訊息</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"rxjs-observables\">RxJS (Observables)</h3>\n<ul>\n<li><p><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2017/12/08/rxjs/\">希望是最淺顯易懂的 RxJS 教學</a></p>\n</li>\n<li><p><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.jerry-hong.com/series/rxjs\">30 天精通 RxJS</a></p>\n</li>\n<li><p>可以被取消</p>\n</li>\n<li><p>需要時才執行</p>\n</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> Observable <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> resultA<span class=\"token punctuation\">,</span> resultB<span class=\"token punctuation\">,</span> resultC<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://example.com?num1=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;num2=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromPromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>resultA <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>resultB <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>resultC <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resultA<span class=\"token punctuation\">,</span> resultB<span class=\"token punctuation\">,</span> resultC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li><code>Observable.fromPromise</code> 會將 Promise 轉換成 observable stream。</li>\n<li><code>.do</code> 和 .<code>flatMap</code> 是 Observable 的運算子。</li>\n</ul>\n<h2 id=\"ajax\">AJAX</h2>\n<p>在講到非同步處理時，會有兩個經常出現的相關詞彙——「REST」和「AJAX」，這兩個名詞其實都是技術概念的總稱。</p>\n<p>REST（Representational State Transfer）是一種網路架構的設計概念，定義交換資訊時需要的具體狀態，例如統一介面、所有資源都具有唯一的 URI、可以透過超連結彼此連接、不具有狀態，每次的互動都在一次裡完結，RESTful API 就是符合這種設計思想的 API。</p>\n<p>AJAX（Asynchronous JavaScript and XML）則是泛指如何透過 JS 取得或傳遞延伸的資料（即 XML，Extensible Mark Language），並反應到網頁上的技術概念，後續提及的 <code>XMLHttpRequest</code> 物件、jQuery 裡的 <code>.ajax</code> function、Fetch 和 axios 都是種 AJAX 技術。</p>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/doriven/items/503fdc6de9bc0e725334\">Native な JavaScript で Fetch API を利用し Ajax を行う</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/katsunory/items/9bf9ee49ee5c08bf2b3d\">Javascript の Ajax についての基本まとめ - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://jzchangmark.wordpress.com/2016/06/12/%E9%80%8F%E9%81%8E-curl%E3%80%81python%E3%80%81postman-%E4%BE%86-request-api/\">透過 curl、Python、Postman 來 Request API - 🐴 的學習筆記</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://realdennis.medium.com/%E4%B8%80%E8%B5%B7%E4%BE%86%E6%8A%8A%E7%85%A9%E4%BA%BA-xmlhttprequest-%E8%AE%8A%E6%88%90-fetch-%E6%80%8E%E9%BA%BC%E6%A8%A3-8657f2854894\">一起來把煩人 XMLHttpRequest 變成 Fetch 怎麼樣？</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/ajax_fetch.html\">AJAX 與 Fetch API · 從 ES6 開始的 JavaScript 學習生活</a></li>\n</ul>\n<h3 id=\"1-xmlhttprequest\">1. XMLHttpRequest</h3>\n<ul>\n<li>於 2006 年正式列入 W3C 標準中</li>\n<li>難以閱讀與撰寫</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reqOnload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> email <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reqError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://randomuser.me/api/\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> reqOnload<span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> reqError<span class=\"token punctuation\">;</span></code></pre><h3 id=\"2-jqueryajax\">2. jQuery.ajax()</h3>\n<ul>\n<li>基於 XHR 開發，然而 XHR 架構不清晰，並已有替代方案</li>\n<li>jQuery 整體項目太大，效益低落</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://randomuser.me/api/\"</span><span class=\"token punctuation\">,</span>\n  dataType<span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"3-fetch\">3. Fetch</h3>\n<ul>\n<li>自 ES6 起提供的方式</li>\n<li>概念相近 jQuery 的 <code>$.ajax</code></li>\n<li>使用 ES6 的 Promise 進行回傳，回傳 <code>ReadableStream</code> 物件</li>\n<li>需搭配 then 與 catch 進行處理</li>\n<li>會將 400，500 都當做請求成功，需要另外做處理</li>\n<li>預設不帶 cookie</li>\n<li>不支援 timeout handle</li>\n<li>不支援監測請求的進度</li>\n<li>較早的瀏覽器並不支援（IE11 以下不支援）</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://randomuser.me/api/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> email <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"4-axios\">4. Axios</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://eugenesu0515.github.io/Blog/2018/06/25/Vue%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%B4%B9%EF%BC%9Aaxios/\">Vue 套件介紹：axios - Eugene Su</a></li>\n<li>Vue.js 作者推薦使用</li>\n<li>使用需引入 <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/axios/axios\">axios</a></li>\n<li>概念相近 jQuery 的 <code>$.ajax</code></li>\n<li>可以在 node.js 中使用</li>\n<li>支援防 CSRF</li>\n<li>提供併發請求</li>\n<li>相當輕量，約 13kb</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naxios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://randomuser.me/api/\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execued\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h2 id=\"es6-加進的新功能\">ES6 加進的新功能</h2>\n<h3 id=\"1-default-parameters\">1. Default Parameters</h3>\n<p>更快速的 function 參數給定預設值：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">link</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"2-template-literals\">2. Template Literals</h3>\n<p>允許透過語法 <code>${val}</code> 將變數嵌入至字串中：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Your name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>first<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>last<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"3-multi-line-strings\">3. Multi-line Strings</h3>\n<p>允許使用 `（backticks）接受多行字串指定：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">first line\nsecond line</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"4-destructing-assignment\">4. Destructing Assignment</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">object<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> …rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3, 4, 5]</span>\n\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>p<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> q<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre><h3 id=\"5-object-literals\">5. Object Literals</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// with property value shorthand</span>\n  <span class=\"token comment\">// syntax, you can omit the property</span>\n  <span class=\"token comment\">// value if key matches variable</span>\n  <span class=\"token comment\">// name</span>\n  make<span class=\"token punctuation\">,</span> <span class=\"token comment\">// same as make: make</span>\n  model<span class=\"token punctuation\">,</span> <span class=\"token comment\">// same as</span>\n  model<span class=\"token operator\">:</span> model\n  value<span class=\"token punctuation\">,</span> <span class=\"token comment\">// same as value: value</span>\n  <span class=\"token comment\">// computed values now work with</span>\n  <span class=\"token comment\">// object literals</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'make'</span> <span class=\"token operator\">+</span> make<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Method definition shorthand syntax</span>\n  <span class=\"token comment\">// omits `function` keyword &amp; colon</span>\n  <span class=\"token function\">depreciate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Kia'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sorento'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"6-arrow-function\">6. Arrow Function</h3>\n<p>箭頭函式亦會更改物件裡的 this 指向行為，從原本的指向呼叫者改為指向其所屬物件</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> paramN</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> statements <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> paramN</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> expression\n<span class=\"token comment\">// 等於 : => { return expression; }</span>\n\n<span class=\"token comment\">// 只有一個參數時, 括號才能不加:</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">singleParam</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> statements <span class=\"token punctuation\">}</span>\n<span class=\"token parameter\">singleParam</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> statements <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 若無參數, 就一定要加括號:</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> statements <span class=\"token punctuation\">}</span></code></pre><h3 id=\"7-promise\">7. Promise</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wait1000</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">wait1000</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yay!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">wait1000</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wheeyee!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"8-let--const-block-scoped\">8. Let &amp; Const, Block-Scoped</h3>\n<ul>\n<li><code>let</code> 和 <code>const</code> 的作用域從之前 <code>var</code> 的函式變成了離此變數最近的 <code>{}</code> 區塊範圍內</li>\n<li><code>let</code> 不可重覆宣告，執行時會吐出錯誤</li>\n<li><code>const</code> 宣告時即須初始化，並且不可修改</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">letExample</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> letValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inside block\"</span><span class=\"token punctuation\">,</span> letValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// [SyntaxError] redeclaration of letValue would be a SyntaxError</span>\n    <span class=\"token keyword\">let</span> letValue <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// [SyntaxError] Accessing letValue is a Reference Error because it</span>\n    <span class=\"token comment\">// was defined w/in if-block</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>letValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// if we get here, it means that the JS engine didn't</span>\n    <span class=\"token comment\">// throw an exception, which means that the engine</span>\n    <span class=\"token comment\">// (or transpiled code) did not faithfully reproduce</span>\n    <span class=\"token comment\">// how let should work</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"let not faithfully handled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// e is a ReferenceError</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"letValue not accessible\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">letExample</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"9-classes\">9. Classes</h3>\n<p>ES6 透過 prototype 和 function 實作出了類 inheritance 結構的 class，但仍和傳統 Java、Python 的 class 有些差別</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' makes a noise.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Lion</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> ' roars<span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><h3 id=\"10-module\">10. Module</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Export</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAccounts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Import</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> port<span class=\"token punctuation\">,</span> getAccounts <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h2 id=\"mutationobserver\">MutationObserver</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.fundebug.com/2019/01/10/understand-mutationobserver/\">JavaScript 是如何工作的：使用 MutationObserver 跟踪 DOM 的变化</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.sessionstack.com/how-javascript-works-tracking-changes-in-the-dom-using-mutationobserver-86adc7446401\">How JavaScript works: tracking changes in the DOM using MutationObserver | by Alexander Zlatkov | SessionStack Blog</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://zh.javascript.info/mutation-observer\">DOM 变动观察器（Mutation observer）</a></li>\n</ul>\n<h3 id=\"簡介\">簡介</h3>\n<p><code>MutationObserver</code> 會在指定的 DOM 出現變化，例如增減節點、變更屬性、修改文字時回傳通知。</p>\n<h3 id=\"使用\">使用</h3>\n<p>想要使用 <code>MutationObserver</code> 之前，我們需要先建立一個 instance，並且傳入一個 function 讓它每次偵測到變化時調用。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mutationObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mutations</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mutations<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mutation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>建立好的物件有三個 methods：</p>\n<ul>\n<li><code>observe</code>：開始監聽變化，需要兩個參數—— 你想觀測的 DOM 節點和設定用的物件</li>\n<li><code>disconnect</code>：停止監聽變化</li>\n<li><code>takeRecords</code>：回傳 callback 啟動之前的最後一次修改</li>\n</ul>\n<p>這裡有個開始監聽變化的例子：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Starts listening for changes in the root HTML element of the page.</span>\n<span class=\"token comment\">// 第一個傳入參數為監察目標，可改為如 document.querySelector(\"body\")</span>\nmutationObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attributes<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  characterData<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  childList<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  subtree<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  attributeOldValue<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  characterDataOldValue<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>當我們調用了 <code>mutationObserver.observe(...)</code> 開始監聽，網頁上的 DOM 出現變化時，我們就能在控制台裡看到 mutations 陣列裡的各個 <a target=\"_blank\" rel=\"nofollow\" href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/MutationObserver#MutationRecord\">MutationRecord</a> 的記錄。</p>\n<p>當工作完成，我們想要停止觀察 DOM，可以調用相關 method：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Stops the MutationObserver from listening for changes.</span>\nmutationObserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>在 <code>MutationObserver</code> 出現之前，人們用來觀測網頁元件變化的方法有：</p>\n<ul>\n<li>Polling</li>\n<li>MutationEvents</li>\n<li>CSS animations</li>\n</ul>\n<p>Polling：最簡單也最簡潔的方法，使用瀏覽器的 <code>setInterval</code> WebAPI 定期檢查是否發生任何變化，但這種方法會明顯地降低網路應用／網站的效能。</p>\n<p>MutationEvents：於 2000 年加入的 <a target=\"_blank\" rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events\">Mutation events API</a>，由於它在每次 DOM 變化都會被調用，同樣導致效能問題，目前 <code>MutationEvents</code> API 已經被棄用。</p>\n<p>CSS animations：這是個有些特怪異的方案，基本上的概念是一個有 CSS 動畫的元素加進 DOM 中時，動畫開始就會觸發 animationstart 事件，當我們再對這個事件加上 handler，就能掌握元素加進 DOM 中的確切時間。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container-element<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> nodeInserted</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.99<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#container-element *</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation-duration</span><span class=\"token punctuation\">:</span> 0.001s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-name</span><span class=\"token punctuation\">:</span> nodeInserted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><p>需要先檢查 <code>event.animationName</code> 是否是我們所想要的動畫。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">insertionListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Making sure that this is the animation we want.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>animationName <span class=\"token operator\">===</span> <span class=\"token string\">\"nodeInserted\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Node has been inserted: \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"animationstart\"</span><span class=\"token punctuation\">,</span> insertionListener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// standard + firefox</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MSAnimationStart\"</span><span class=\"token punctuation\">,</span> insertionListener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// IE</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webkitAnimationStart\"</span><span class=\"token punctuation\">,</span> insertionListener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chrome + Safari</span></code></pre><p><code>MutationObserver</code> 相較這些方案提供了更多優勢，包括它涵蓋了 DOM 中的每種可能變化，以及分段啟動的特性，讓它有更好的效能，並且擁有相當優秀的支援性。</p>\n<h2 id=\"intersectionobserver\">IntersectionObserver</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://codepen.io/osublake/embed/6fd214ecd74e7091ec7b609bb0270f97?height=450&amp;slug-hash=6fd214ecd74e7091ec7b609bb0270f97&amp;user=osublake&amp;tab-bar-color=%23222&amp;name=cp_embed_2#result-box\">example</a></li>\n</ul>\n<h3 id=\"簡介-1\">簡介</h3>\n<p><code>IntersectionObserver</code> 會在指定的目標出現在觀察器 (window) 中時，才回傳 <code>true</code>，\n不同於 jQuery 的 <code>onscroll</code> 是在每次捲動時都執行一次監聽。</p>\n<h3 id=\"使用-1\">使用</h3>\n<p><code>let observer = new IntersectionObserver(callback, [option]);</code></p>\n<ul>\n<li><code>callback</code>: 要執行的動作函式</li>\n</ul>\n<p>callback 預設的傳入參數為一陣列</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 唯讀變數，目標元素的矩形節點的資訊 (ID、座標、長寬)</span>\n    boundingClientRect<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 目標元素的出現比例</span>\n    intersectionRation<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 唯讀變數，目標元素與觀察器的相交區域</span>\n    intersectionRect<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 是否出現於觀察器中</span>\n    isIntersecting<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 觀察器的資訊</span>\n    rootBounds<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 目標</span>\n    target<span class=\"token operator\">:</span> 目標的 <span class=\"token constant\">DOM</span> 節點\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li><code>option</code>: 有三個參數可調整</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  rootMargin<span class=\"token operator\">:</span> <span class=\"token string\">\"0px 0px 0px 0px\"</span><span class=\"token punctuation\">,</span>\n  threshold<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre><p><code>root</code>: 可指定某個特定的 element 做為觀察器: <code>root: documnet.getElementById(&#39;container&#39;)</code>，預設值為 <code>null</code>，即目前觀看中的視窗。\n<code>rootMargin</code>: 四個值依序為上、右、下、左，可放大或縮小的觀察器的範圍，預設值為 <code>&quot;0px 0px 0px 0px&quot;</code>。\n<code>threshold</code>: 指定目標出現於觀察器內的百分比，到達該值後才執行 callback，可指定多個值如: <code>[0, 0.25, 0.5, 0.75, 1]</code> 會在目標出現 0%、25%、50%、75%、100% 的時候都執行一次 callback 函式，預設值為 <code>[0]</code>，即目標接觸到觀察器的邊緣便觸發 callback 函式。</p>\n<p><code>observer.observe(el)</code>\n<code>observer.unobserve(el)</code>\n<code>observer.disconnect()</code></p>\n<h2 id=\"進階\">進階</h2>\n<h3 id=\"whats-this-in-javascript-\">What&#39;s THIS in JavaScript ?</h3>\n<ul>\n<li><code>this</code> 是 JavaScript 的一個關鍵字。</li>\n<li><code>this</code> 是 function 執行時，自動生成的一個內部物件。</li>\n<li>隨著 function 執行場合的不同，<code>this</code> 所指向的值，也會有所不同。</li>\n<li>在大多數的情況下，<code>this</code> 代表的就是呼叫 function 的物件（Owner Object of the function）。\n亦即 function 執行時所屬的物件，而非 function 本身</li>\n<li>脫離物件的 <code>this</code> 基本上沒有任何意義</li>\n<li>沒有意義的 <code>this</code> 會根據<strong>嚴格模式</strong>以及<strong>環境</strong>給一個預設值</li>\n<li>嚴格模式底下預設就是 <code>undefined</code>，非嚴格模式在瀏覽器底下預設值是 <code>window</code>。</li>\n<li>要看 this，就看這個函式「怎麽」被呼叫\n例如 <code>addEventListener</code> 底下的 <code>this</code> 會是「觸發事件的元素」\n但裡頭的 callback function 中的 <code>this</code> 會因為 Default Binding 而指向 <code>window</code></li>\n<li>可以用 <code>call</code>、<code>apply</code> 與 <code>bind</code> 指定 this 的值\n或是 arrow function 強制綁定 this、使用一個變數儲存 this 當做參考值</li>\n</ul>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一個參數值即為 this</span>\n<span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hihihi\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// apply 以 Array 的方式傳進參數</span>\n<span class=\"token comment\">// 這兩種方式皆為呼叫 function 的函式</span>\n\n<span class=\"token keyword\">const</span> myHello <span class=\"token operator\">=</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bind 則是會回傳一個新的 function</span>\n<span class=\"token comment\">// 並且在調用 bind 後值就不會改變了</span></code></pre><ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://kuro.tw/posts/2017/10/12/What-is-THIS-in-JavaScript-%E4%B8%8A/\">What&#39;s THIS in JavaScript ? [上]</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2019/02/23/javascript-this/\">淺談 JavaScript 頭號難題 this：絕對不完整，但保證好懂</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://ithelp.ithome.com.tw/articles/10193193\">重新認識 JavaScript: Day 20 What&#39;s &quot;THIS&quot; in JavaScript (鐵人精華版)</a></li>\n</ul>\n<h3 id=\"closure\">Closure</h3>\n<p>閉包（Closure）是利用變數作用域的特性，加上一層 function 以限制儲存環境的變數值作用範圍，避免污染 global 環境，且此變數不會因為 function 執行完畢後而消失</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// without closure</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">counterTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counterTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">counterTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\n<span class=\"token comment\">// with closure</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">counterTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> counterTick<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// also could be written as arrow function</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> countFunc <span class=\"token operator\">=</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">countFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">countFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre><ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2018/12/08/javascript-closure/\">所有的函式都是閉包：談 JS 中的作用域與 Closure</a></li>\n</ul>\n<h3 id=\"hoisting\">Hoisting</h3>\n<p>Hoisting（提升）是指一個變數或函式在宣告前就被使用，JavaScript 就會在使用之前再進行一次宣告，而變數只會單純宣告不會給定值，因此執行結果通常會是 <code>undefined</code> ，具體上如下例</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">doSomething</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此行非原本撰寫的程式</span>\n  <span class=\"token comment\">// 是由於下面使用的 x=100 裡的 x 未經宣告</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 而被 JavaScript 提升至執行序的先頭</span>\n  <span class=\"token comment\">// 概念上類似移動至此函式的最上方進行宣告</span>\n  <span class=\"token comment\">// 因此函式內部的 console.log 會是 undefined</span>\n  x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 150</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre><p>函式則分有存入變數及直接定義的兩種宣告方式，存入變數的函式宣告由於與變數同樣只有宣告被提升，因此會出現 <code>TypeError</code> 錯誤，直接定義的函式則會連同內容一起被提升</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 傳入變數式</span>\n<span class=\"token comment\">// 執行結果會為 TypeError: square is not a function</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 直接定義式</span>\n<span class=\"token comment\">// 執行結果為正常輸出</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><p>若有同名的定義函式和變數使用，由於函式的優先權較高，執行結果會是定義函式</p>\n<p><code>let</code> 和 <code>const</code> 一樣也有 Hoisting 行為，但這兩種宣告不會被初始化成 <code>undefined</code> ，並且在賦值之前就存取這兩種宣告的值時，會直接拋出錯誤</p>\n<p>而當初加入 Hoisting 設計的原因是為了達成函式相互歸遞（mutual recursion），以及避免必須以類 ML 語言的順序撰寫（avoid painful bottom-up ML-like order）</p>\n<p>實際運作上是 JavaScript 會於執行 function 時產生一個 Execution Contexts 執行環境（同理亦有 global EC），將所有需要的資訊存在裡面，裡頭會有個對應的 Variable Object 用以存放宣告的變數、函式和傳入的變數，在執行的時候到 VO 裡頭查找，並依參數、函式和變數的順序放入其中</p>\n<p>參數傳進 VO 時直接放入，沒有值的話會初始化為 <code>undefined</code> ；function 傳進 VO 時新增一屬性放入建立 function 完後的回傳值（可類比為指向此 function 的指標），已有同名屬性時進行覆蓋；變數傳進 VO 時新增一屬性並賦值為 <code>undefined</code> ，已有同名屬性時則不會修改該值</p>\n<p><code>let</code> 和 <code>const</code> 多做了一個檢查，皆是在「提升之後」和「賦值之前」的「執行期間」內（Temporal Dead Zone）被存取就會拋出錯誤，亦即 Hoisting 的原理實質上是執行時序的調動，而非程式碼的編修</p>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2018/11/10/javascript-hoisting/\">我知道你懂 hoisting，可是你了解到多深？</a></li>\n</ul>\n<h3 id=\"浮點數計算\">浮點數計算</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://0.30000000000000004.com/\">Floating Point Math</a></li>\n</ul>\n<h3 id=\"typescript\">TypeScript</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://willh.gitbook.io/typescript-tutorial/\">TypeScript 新手指南</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://future-architect.github.io/typescript-guide/\">仕事ですぐに使える TypeScript</a></li>\n</ul>\n<h3 id=\"api-mocking\">API Mocking</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://drive.google.com/file/d/1OOV55pClWtNBBM7StU7wepH39-UZb0lM/view\">用 API mocking 讓前端不再苦苦等待</a></li>\n</ul>\n<h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://ithelp.ithome.com.tw/users/20065504/ironman/1259\">重新認識 JavaScript 系列</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://johnresig.com/apps/learn/\">Learning Advanced JavaScript</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://chupainotebook.blogspot.com/search/label/%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86\">克服 JS 的奇怪部份</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch1.md\">You Don&#39;t Know JS Yet: Get Started - 2nd Edition</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://exploringjs.com/deep-js/toc.html\">Deep JavaScript</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/stephentian/33-js-concepts\">JavaScript 开发者应懂的 33 个概念</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/oimo23/items/b380a914867ec973039a\">【翻訳】JavaScript 開発者が知るべき 33 のコンセプト リンク集 - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/rana_kualu/items/6bcc99226be741348c34\">2016 年から 2019 年までの JavaScript の全て</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/AllJointTW/clean-code-javascript\">無瑕的程式碼 JavaScript</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/\">DOM 的事件傳遞機制：捕獲與冒泡</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/enjoy-life-enjoy-coding/javascript-%E9%97%9C%E6%96%BC-object-%E4%B8%80%E5%8F%A3%E6%B0%A3%E5%85%A8%E8%AA%AA%E5%AE%8C-4bb924bcc79f\">JavaScript | 關於 Object ，一口氣全說完</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/walkout/js-%E5%8E%9F%E5%8A%9B%E8%A6%BA%E9%86%92-day13-event-queue-event-loop-event-table-374fbbef3e40\">JS 原力覺醒 — Event Queue &amp; Event Loop 、Event Table</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/\">覺得 JavaScript function 很有趣的我是不是很奇怪 - Huli</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://f2e.kalan.dev/\">深入現代前端開發</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://azu.github.io/promises-book/\">JavaScript Promise の本</a></li>\n</ul>\n","date":"2019-07-18T07:03:00.000Z","excerpt":null,"printDate":"July 18, 2019","printReadingTime":"14 min read","tags":["F2E","JavaScript"],"image":"https://f6bfb5.github.io/preview/f2e-03-javascript.png"}