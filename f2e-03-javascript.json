{"title":"前端筆記 (3) Javascript","slug":"f2e-03-javascript","html":"<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://jsprimer.net/#javascript-primer\">JavaScript Primer</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://ja.javascript.info/\">現代の JavaScript チュートリアル</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://hackmd.io/@chupai/rkBjZjh7H/\">JavaScript 竹白記事本</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://ithelp.ithome.com.tw/users/20083608/ironman/1354\">邁向 JavaScript 勇者之路</a></li>\n</ul>\n<h2 id=\"現代-js-的常見基礎技術\">現代 JS 的常見基礎技術</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://nodejs.org/en/\">Node.js</a></li>\n<li>Package Manager\n<br>├ npm\n<br>├ Yarn\n<br>└ Bower</li>\n<li>Task Runner / Module Bundler\n<br>├ gulp\n<br>├ Grunt\n<br>├ webpack\n<br>└ Parcel</li>\n<li>Transpiler / Compiler\n<br>└ Babel</li>\n<li>Alt JS\n<br>├ CoffeeScript\n<br>├ TypeScript\n<br>└ PureScript</li>\n<li>Framework / UI Library\n<br>├ React\n<br>├ Vue.js\n<br>├ Angular\n<br>└ Riot.js</li>\n</ul>\n<h2 id=\"撰寫\">撰寫</h2>\n<h3 id=\"變數\">變數</h3>\n<ul>\n<li>case senstive</li>\n<li>首字符可為任意 unicode 或 <code>$</code>、<code>_</code></li>\n<li>第二字符之後除任意 unicode 或 <code>$</code>、<code>_</code> 之外，還可為 <code>0-9</code></li>\n<li>保留字不可用為變數名稱</li>\n</ul>\n<h3 id=\"宣告\">宣告</h3>\n<ul>\n<li><code>var</code> 函式作用域</li>\n<li><code>let</code> 區塊作用域，不可重複宣告</li>\n<li><code>const</code> 區塊作用域，不可重複宣告、不可再次賦值</li>\n</ul>\n<h4 id=\"變數提升-hosting\">變數提升 (Hosting)</h4>\n<p>JavaScript 引擎在解析原始碼時，會先將所有已宣告的變數提升到程式碼的頂部，綁定其所屬作用域但不賦值。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 顯示 undefined</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre><p>因此上述例子的 <code>a</code> 並未宣告與賦值，但在執行上不會報錯。</p>\n<h3 id=\"命名\">命名</h3>\n<ul>\n<li>易於理解的內容名稱</li>\n<li>不過長或過短</li>\n<li>不使用容易混淆的名稱</li>\n<li>開頭使用 <code>_</code> 表示具有特殊意義，非必要不使用</li>\n<li>統一命名風格</li>\n<li>只使用英文命名</li>\n<li>習慣用法如下：\n<br>├ 變數／函式名稱：camelCase\n<br>├ 類別名稱：PascalCase\n<br>└ 常數：全大寫，字詞間用下底線 <code>_</code></li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> numberOfStudents\n<span class=\"token keyword\">const</span> numberOfLegs\n<span class=\"token keyword\">function</span> <span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre><h2 id=\"型別\">型別</h2>\n<p>程式語言裡常見的型別有動態型別與靜態型別，靜態型別語言的變數於編譯時已經確定其型別， JavaScript 所屬的動態型別則是於執行階段變數賦值後才會擁有型別。</p>\n<p>Javascript 內建有七大型別：</p>\n<ul>\n<li>Null 空值</li>\n<li>Undefined 「未定義」或「不存在」</li>\n<li>Boolean 布林值 (<code>true</code>、<code>false</code>)</li>\n<li>Number 數值 (整數 <code>1</code> 或浮點數 <code>3.14</code>)</li>\n<li>String 字串 (<code>Hello World</code>)</li>\n<li>Object 物件 (值集合)</li>\n<li>Symbol 於 ES6 新增的新型別</li>\n</ul>\n<p>又可細分為：</p>\n<ol>\n<li>基本型別 (primitive type) / 原始型別</li>\n</ol>\n<ul>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n<li>特殊值 (<code>undefined</code>、<code>null</code>)</li>\n</ul>\n<ol start=\"2\">\n<li>複合型別 (complex type) / 參考型別 (reference type)</li>\n</ol>\n<ul>\n<li>Object 物件，可再分為三個子型别 (subtype)</li>\n<li>Object 狹義物件</li>\n<li>Array 陣列</li>\n<li>Function 函式</li>\n</ul>\n<h3 id=\"typeof-運算子\"><code>typeof</code> 運算子</h3>\n<p><code>typeof</code> 是能檢視一個值型別的運算子。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"undefined\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span>\n\na <span class=\"token operator\">=</span> <span class=\"token function\">Symble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"symble\"</span></code></pre><p>但是 <code>typeof a</code> 並非詢問 <code>a</code> 變數的型別，而是詢問「目前在 <code>a</code> 中的值的型別是什麼」。JavaScript 的變數單純只是值的容器。</p>\n<p><code>null</code> 的類型是 <code>object</code>，這是由於歷史原因造成的。1995 年的 JavaScript 語言第一版，只設計了五種資料類型（物件、整數、浮點數、字串和布林值），沒考慮 <code>null</code>，只把它當作 <code>object</code> 的一種特殊值。後來 <code>null</code> 獨立出來，作為一種單獨的資料類型，為了兼容以前的代碼，<code>typeof null</code> 傳回 <code>object</code> 就沒法改變了，所以是一個萬年 Bug。</p>\n<p>我們可以利用 <code>null</code> 會被 <code>typeof</code> 檢測為 <code>object</code> 並且會轉為 <code>false</code> 的結果來驗證值是否為 <code>null。</code></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>a <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> a <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><h2 id=\"基礎語法\">基礎語法</h2>\n<h3 id=\"forin-和-forof-的差別\">for...in 和 for...of 的差別</h3>\n<ol>\n<li>迭代 <strong>物件屬性</strong> 時使用 <code>for...in</code>，迭代 <strong>陣列</strong> 時使用 <code>for...of</code></li>\n<li><code>for..in</code> 輸出 <strong>屬性名稱 (key)</strong>，<code>for...of</code> 輸出 <strong>值 (value)</strong></li>\n<li><code>for...of</code> 是 ES6 的新語法，補足了 ES5 <code>for...in</code> 的不足之處</li>\n<li><code>for...of</code> 不能迭代物件，需與 <code>Object.keys()</code> 搭配使用</li>\n</ol>\n<h3 id=\"array\">Array</h3>\n<ul>\n<li><code>var fiveItems = new Array(5);</code>：建立指定長度陣列</li>\n<li><code>fill(value[, start=0[, end=this.length]])</code>：填入輸入值至陣列的指定索引開始至結尾處</li>\n<li><code>map()</code> 可以使用自訂判斷為真的值建立一個新陣列：<code>map1 = array1.map(x ⇒ x*2 );</code>，注意此方法與資料型態的 <code>Map()</code> 是不同東西。</li>\n<li><code>reduce()</code> 簡言之能夠簡化需要遞迴整個陣列的操作，並回傳一經過處理後的值。例如計算整個陣列總和可以使用 <code>array1.reduce((pre,cur) =&gt; pre+cur)</code> 求得。</li>\n<li>檢查陣列是否為空：<code>if (typeof image_array !== &#39;undefined&#39; &amp;&amp; image_array.length &gt; 0)</code></li>\n</ul>\n<h4 id=\"快速產生陣列內容\">快速產生陣列內容</h4>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp\">alternative range()</a></li>\n<li>數值: <code>[...Array(5).keys()];</code> =&gt; <code>[0, 1, 2, 3, 4]</code></li>\n<li>文字: <code>String.fromCharCode(...[...Array(&#39;D&#39;.charCodeAt(0) - &#39;A&#39;.charCodeAt(0) + 1).keys()].map(i =&gt; i + &#39;A&#39;.charCodeAt(0)));</code> ⇒ <code>&quot;ABCD&quot;</code></li>\n<li>組合: <code>for (const x of Array(5).keys()) console.log(x, String.fromCharCode(&#39;A&#39;.charCodeAt(0) + x));</code> ⇒ <code>0,&quot;A&quot; 1,&quot;B&quot; 2,&quot;C&quot; 3,&quot;D&quot; 4,&quot;E&quot;</code></li>\n</ul>\n<h4 id=\"slice-splice-split\">slice(), splice(), split()</h4>\n<h5 id=\"slice\">slice()</h5>\n<ul>\n<li><code>array.slice(begin, end)</code></li>\n<li>複製陣列項目，不會修改原始陣列，回傳指定兩點之間的內容</li>\n<li><code>begin</code>：開始複製項目的位置，負值則為反方向計算</li>\n<li><code>end</code>：結束複製項目的位置，留空時會複製至結尾</li>\n</ul>\n<h5 id=\"splice\">splice()</h5>\n<ul>\n<li><code>array.splice(start, deleteCount, item...)</code></li>\n<li>新增／刪除陣列項目，會修改原始陣列，回傳被刪除的項目</li>\n<li><code>start</code>：插入或刪除項目的位置，負值則為反方向計算</li>\n<li><code>deleteCount</code>：刪除的個數，傳入 0 則不會刪除</li>\n<li><code>item...</code>：要插入的新項目。</li>\n</ul>\n<h5 id=\"split\">split()</h5>\n<ul>\n<li><code>string.split(seperator, length)</code></li>\n<li>分割字串成陣列，不會修改原始字串，回傳分割後的字串陣列</li>\n<li><code>seperator</code>：字符或正規表達式，依照此參數分割字串</li>\n<li><code>length</code>：回傳陣列的最大長度</li>\n</ul>\n<h4 id=\"foreach-map-filter-find-every-some-reduce\">forEach(), map(), filter(), find(), every(), some(), reduce()</h4>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://hsiangfeng.github.io/javascript/20190421/1216566123/\">關於 JS 陣列 20 種操作的方法</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://w3c.hexschool.com/blog/6594e4ff\">JavaScript 陣列 (array) 操作處理大全</a></li>\n</ul>\n<h5 id=\"foreach\">forEach()</h5>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">itemsArray<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>處理陣列內<strong>每個</strong>資料</li>\n<li>無回傳值（<code>undefined</code>）</li>\n<li>會改變原始陣列資料</li>\n</ul>\n<h5 id=\"map\">map()</h5>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">itemsArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">+</span> item<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>處理陣列內<strong>每個</strong>資料</li>\n<li>回傳一個新的陣列</li>\n<li>不會改變原始陣列資料</li>\n</ul>\n<h5 id=\"filter\">filter()</h5>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">itemsArray<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>回傳<strong>所有</strong>處理為 true 的項目</li>\n<li>回傳一個新的陣列</li>\n</ul>\n<h5 id=\"find\">find()</h5>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">itemsArray<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>回傳<strong>第一個</strong>處理結果為 true 的項目</li>\n</ul>\n<h5 id=\"every\">every()</h5>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">itemsArray<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>檢查陣列內<strong>所有</strong>值是否符合條件</li>\n<li>回傳 boolean 值</li>\n</ul>\n<h5 id=\"some\">some()</h5>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">itemsArray<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>檢查陣列內<strong>是否存在一</strong>值符合條件</li>\n<li>僅需有值符合即可</li>\n<li>回傳 boolean 值</li>\n</ul>\n<h5 id=\"reduce\">reduce()</h5>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> myArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 處理每個元素後等待回傳結果，第一次處理時代入初始值 0</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> myArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 與之前的數值加總，回傳後代入下一輪的處理</span>\n  <span class=\"token keyword\">return</span> prev <span class=\"token operator\">+</span> element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>自陣列首值依序處理</li>\n<li>第一次被呼叫時，<code>accumulator</code> 與 <code>currentValue</code> 的值可能為兩種不同的狀況：\n<br>├ 1. 呼叫 <code>reduce()</code> 有提供 <code>initialValue</code> 時，<code>accumulator</code> 會等於 <code>initialValue</code>，<code>currentValue</code> 等於陣列中的第一個元素值\n<br>└ 2. 未提供 <code>initialValue</code>時，<code>accumulator</code> 會等於陣列的第一個元素值，<code>currentValue</code> 等於陣列的第二個元素</li>\n</ul>\n<h4 id=\"如何安全使用會破壞-array-資料的-method\">如何安全使用會破壞 Array 資料的 Method</h4>\n<p>例如 <code>reverse()</code> 會直接改變原本陣列的資料：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// arr1: [1,2,3]</span>\narr1<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [3,2,1]</span>\narr1<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [3,2,1]</span></code></pre><p>可以使用展開運算子 <code>[...arr]</code> 或是 <code>concat()</code> 避開修改原本的陣列：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// arr2: [1,2,3]</span>\n<span class=\"token keyword\">const</span> changedArr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1,2,3]</span>\nchangedArr2<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [3,2,1]</span></code></pre><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// arr3: [1,2,3]</span>\n<span class=\"token keyword\">const</span> changedArr3 <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr3<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1,2,3]</span>\nchangedArr3<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [3,2,1]</span></code></pre><ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/poruruba/items/6c67c7eef34ed302feb3\">便利ページ：Javascript でちょっとした便利な機能を作ってみた</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.youtube.com/watch?v=Mus_vwhTCq0\">JavaScript Pro Tips - Code This, NOT That - YouTube</a></li>\n</ul>\n<h3 id=\"string\">String</h3>\n<ul>\n<li><code>String.substr( start, length )</code></li>\n<li><code>String.substring( start, end )</code></li>\n<li>預設會擷取到最後一個字符</li>\n</ul>\n<h4 id=\"string-to-int\">String to Int</h4>\n<p><code>parseInt(string, radix)</code></p>\n<h3 id=\"object\">Object</h3>\n<ol>\n<li><code>obj[key] = value</code></li>\n<li><code>{ [key]: value }</code></li>\n<li><code>Object.keys(obj)</code></li>\n<li><code>Object.values(obj)</code></li>\n<li><code>Object.entries(obj)</code></li>\n<li><code>!(&quot;key&quot; in obj)</code></li>\n<li><code>obj.hasOwnProperty(&quot;key&quot;)</code></li>\n<li><code>delete obj[key]</code></li>\n</ol>\n<h3 id=\"queue--stack\">Queue &amp; Stack</h3>\n<ul>\n<li>JS 可直接使用 Array 的\n<br>├ <code>push</code> 放入結尾\n<br>├ <code>unshift</code> 放入開頭\n<br>├ <code>pop</code> 取出結尾\n<br>└ <code>shift</code> 取出開頭\n<br>來實作這兩種資料結構。</li>\n</ul>\n<h4 id=\"queue\">Queue</h4>\n<ul>\n<li>First In First Out</li>\n<li><code>unshift()</code>、<code>pop()</code></li>\n</ul>\n<h4 id=\"stack\">Stack</h4>\n<ul>\n<li>Last In First Out</li>\n<li><code>push()</code>、<code>pop()</code></li>\n</ul>\n<h3 id=\"map--set\">Map &amp; Set</h3>\n<ul>\n<li>JS 於 ES6 新增 <code>Set</code> 與 <code>Map</code> 兩種物件</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://javascript.info/map-set\">Map and Set</a></li>\n</ul>\n<h4 id=\"map-1\">Map</h4>\n<ul>\n<li><code>Map</code> 關心的是 <code>{ 鍵 (key) : 值 (value) }</code> 的對應關係</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES6 Map</span>\n<span class=\"token keyword\">let</span> mapTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"string value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> obj<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Has</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Iterator</span>\n<span class=\"token comment\">// returns for keys</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns for values</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns for [key, value], used by default in for...in</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Delete</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Delete All</span>\nmapTable<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Length</span>\nmapTable<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// To Array</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>mapTable<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"set\">Set</h4>\n<ul>\n<li><code>Set</code> 關心的是不重覆值的獨立元素 <code>{value1, value2}</code></li>\n</ul>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ES6 Set</span>\n<span class=\"token keyword\">let</span> setTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add</span>\nsetTable<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Has</span>\nsetTable<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Iterator</span>\nsetTable<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsetTable<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsetTable<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Delete</span>\nsetTable<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Delete All</span>\nsetTable<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Length</span>\nsetTable<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// To Array</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>setTable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>setTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"mutationobserver\">MutationObserver</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.fundebug.com/2019/01/10/understand-mutationobserver/\">JavaScript 是如何工作的：使用 MutationObserver 跟踪 DOM 的变化</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.sessionstack.com/how-javascript-works-tracking-changes-in-the-dom-using-mutationobserver-86adc7446401\">How JavaScript works: tracking changes in the DOM using MutationObserver | by Alexander Zlatkov | SessionStack Blog</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://zh.javascript.info/mutation-observer\">DOM 变动观察器（Mutation observer）</a></li>\n</ul>\n<h4 id=\"簡介\">簡介</h4>\n<p><code>MutationObserver</code> 會在指定的 DOM 出現變化，例如增減節點、變更屬性、修改文字時回傳通知。</p>\n<h4 id=\"使用\">使用</h4>\n<p>想要使用 <code>MutationObserver</code> 之前，我們需要先建立一個 instance，並且傳入一個 function 讓它每次偵測到變化時調用。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mutationObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutationObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mutations</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  mutations<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mutation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mutation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>建立好的物件有三個 methods：</p>\n<ul>\n<li><code>observe</code>：開始監聽變化，需要兩個參數—— 你想觀測的 DOM 節點和設定用的物件</li>\n<li><code>disconnect</code>：停止監聽變化</li>\n<li><code>takeRecords</code>：回傳 callback 啟動之前的最後一次修改</li>\n</ul>\n<p>這裡有個開始監聽變化的例子：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Starts listening for changes in the root HTML element of the page.</span>\n<span class=\"token comment\">// 第一個傳入參數為監察目標，可改為如 document.querySelector(\"body\")</span>\nmutationObserver<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  attributes<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  characterData<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  childList<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  subtree<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  attributeOldValue<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  characterDataOldValue<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>當我們調用了 <code>mutationObserver.observe(...)</code> 開始監聽，網頁上的 DOM 出現變化時，我們就能在控制台裡看到 mutations 陣列裡的各個 <a target=\"_blank\" rel=\"nofollow\" href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/MutationObserver#MutationRecord\">MutationRecord</a> 的記錄。</p>\n<p>當工作完成，我們想要停止觀察 DOM，可以調用相關 method：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Stops the MutationObserver from listening for changes.</span>\nmutationObserver<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><p>在 <code>MutationObserver</code> 出現之前，人們用來觀測網頁元件變化的方法有：</p>\n<ul>\n<li>Polling</li>\n<li>MutationEvents</li>\n<li>CSS animations</li>\n</ul>\n<p>Polling：最簡單也最簡潔的方法，使用瀏覽器的 <code>setInterval</code> WebAPI 定期檢查是否發生任何變化，但這種方法會明顯地降低網路應用／網站的效能。</p>\n<p>MutationEvents：於 2000 年加入的 <a target=\"_blank\" rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events\">Mutation events API</a>，由於它在每次 DOM 變化都會被調用，同樣導致效能問題，目前 <code>MutationEvents</code> API 已經被棄用。</p>\n<p>CSS animations：這是個有些特怪異的方案，基本上的概念是一個有 CSS 動畫的元素加進 DOM 中時，動畫開始就會觸發 animationstart 事件，當我們再對這個事件加上 handler，就能掌握元素加進 DOM 中的確切時間。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container-element<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> nodeInserted</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0.99<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#container-element *</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation-duration</span><span class=\"token punctuation\">:</span> 0.001s<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-name</span><span class=\"token punctuation\">:</span> nodeInserted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><p>需要先檢查 <code>event.animationName</code> 是否是我們所想要的動畫。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">insertionListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Making sure that this is the animation we want.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>animationName <span class=\"token operator\">===</span> <span class=\"token string\">\"nodeInserted\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Node has been inserted: \"</span> <span class=\"token operator\">+</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"animationstart\"</span><span class=\"token punctuation\">,</span> insertionListener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// standard + firefox</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MSAnimationStart\"</span><span class=\"token punctuation\">,</span> insertionListener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// IE</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webkitAnimationStart\"</span><span class=\"token punctuation\">,</span> insertionListener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Chrome + Safari</span></code></pre><p><code>MutationObserver</code> 相較這些方案提供了更多優勢，包括它涵蓋了 DOM 中的每種可能變化，以及分段啟動的特性，讓它有更好的效能，並且擁有相當優秀的支援性。</p>\n<h3 id=\"intersectionobserver\">IntersectionObserver</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://codepen.io/osublake/embed/6fd214ecd74e7091ec7b609bb0270f97?height=450&amp;slug-hash=6fd214ecd74e7091ec7b609bb0270f97&amp;user=osublake&amp;tab-bar-color=%23222&amp;name=cp_embed_2#result-box\">example</a></li>\n</ul>\n<h4 id=\"簡介-1\">簡介</h4>\n<p><code>IntersectionObserver</code> 會在指定的目標出現在觀察器 (window) 中時，才回傳 <code>true</code>，\n不同於 jQuery 的 <code>onscroll</code> 是在每次捲動時都執行一次監聽。</p>\n<h4 id=\"使用-1\">使用</h4>\n<p><code>let observer = new IntersectionObserver(callback, [option]);</code></p>\n<ul>\n<li><code>callback</code>: 要執行的動作函式</li>\n</ul>\n<p>callback 預設的傳入參數為一陣列</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 唯讀變數，目標元素的矩形節點的資訊 (ID、座標、長寬)</span>\n    boundingClientRect<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 目標元素的出現比例</span>\n    intersectionRation<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 唯讀變數，目標元素與觀察器的相交區域</span>\n    intersectionRect<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 是否出現於觀察器中</span>\n    isIntersecting<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 觀察器的資訊</span>\n    rootBounds<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 目標</span>\n    target<span class=\"token operator\">:</span> 目標的 <span class=\"token constant\">DOM</span> 節點\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li><code>option</code>: 有三個參數可調整</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  rootMargin<span class=\"token operator\">:</span> <span class=\"token string\">\"0px 0px 0px 0px\"</span><span class=\"token punctuation\">,</span>\n  threshold<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre><p><code>root</code>: 可指定某個特定的 element 做為觀察器: <code>root: documnet.getElementById(&#39;container&#39;)</code>，預設值為 <code>null</code>，即目前觀看中的視窗。\n<code>rootMargin</code>: 四個值依序為上、右、下、左，可放大或縮小的觀察器的範圍，預設值為 <code>&quot;0px 0px 0px 0px&quot;</code>。\n<code>threshold</code>: 指定目標出現於觀察器內的百分比，到達該值後才執行 callback，可指定多個值如: <code>[0, 0.25, 0.5, 0.75, 1]</code> 會在目標出現 0%、25%、50%、75%、100% 的時候都執行一次 callback 函式，預設值為 <code>[0]</code>，即目標接觸到觀察器的邊緣便觸發 callback 函式。</p>\n<p><code>observer.observe(el)</code>\n<code>observer.unobserve(el)</code>\n<code>observer.disconnect()</code></p>\n<h2 id=\"非同步處理\">非同步處理</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/G-awa/items/652107a9abf7ff6d0d06\">【初心者向け】JavaScript の非同期処理を理解する　 callback、Promise そして async/await へ - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://developers.google.com/web/fundamentals/primers/promises?hl=zh-tw\">JavaScript Promise：簡介  |  Web  |  Google Developers</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/frochu/%E5%88%A5%E9%80%99%E6%A8%A3%E4%BD%BF%E7%94%A8promise-d4f5a731adb4\">別這樣使用 Promise</a></li>\n</ul>\n<h3 id=\"callback\">Callback</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      num1<span class=\"token operator\">:</span> num1<span class=\"token punctuation\">,</span>\n      num2<span class=\"token operator\">:</span> num2<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    callback\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">success</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> success<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li>多次呼叫會造成語法內嵌，出現 callback hell</li>\n</ul>\n<h3 id=\"promises\">Promises</h3>\n<ul>\n<li><code>Promise</code> 有三種狀態：\n<br>├ 1. <code>pending</code>: 等待\n<br>├ 2. <code>resolved</code>: 成功\n<br>└ 3. <code>rejected</code>: 失敗</li>\n<li><code>new Promise(function (resolve, reject) {})</code></li>\n<li>Promise 執行成功後需在內部 function 呼叫 (撰寫) <code>resolve(成功結果)</code>，失敗則呼叫 <code>reject(失敗結果)</code></li>\n<li>可以在 <code>Promise</code> 後方接上 <code>.then</code> 或 <code>.catch</code> 執行對應行為，<code>.then</code> 的參數為從 <code>resolve(成功結果)</code> 傳來的結果，<code>.catch</code> 的參數則是從 <code>reject(失敗結果)</code> 傳來。</li>\n<li>可解決 callback hell 問題</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> time <span class=\"token operator\">=</span> <span class=\"token number\">500</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      num <span class=\"token operator\">?</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 成功</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"失敗\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"async--await\">Async / Await</h3>\n<ul>\n<li>於 ES7 新增</li>\n<li>欲使一 function 回傳 Promise，需於該 function 前加上 <code>async</code></li>\n<li>使用 Promise 或 function 回傳的 Promise 時需使用 <code>await</code>\n<br>└ 如 <code>let phone = await willGetNewPhone</code> 或 <code>let message = await showOff(phone)</code></li>\n<li>可於函式內使用 <code>try {} catch (error) {}</code> 攔截例外</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">promiseFn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"rxjs-observables\">RxJS (Observables)</h3>\n<ul>\n<li><p><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2017/12/08/rxjs/\">希望是最淺顯易懂的 RxJS 教學</a></p>\n</li>\n<li><p><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.jerry-hong.com/series/rxjs\">30 天精通 RxJS</a></p>\n</li>\n<li><p>可以被取消</p>\n</li>\n<li><p>需要時才執行</p>\n</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> Observable <span class=\"token operator\">=</span> Rx<span class=\"token punctuation\">.</span>Observable<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> resultA<span class=\"token punctuation\">,</span> resultB<span class=\"token punctuation\">,</span> resultC<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://example.com?num1=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num1<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;num2=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>num2<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">fromPromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>resultA <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>resultB <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>resultC <span class=\"token operator\">=</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>resultA<span class=\"token punctuation\">,</span> resultB<span class=\"token punctuation\">,</span> resultC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><ul>\n<li><code>Observable.fromPromise</code> 會將 Promise 轉換成 observable stream。</li>\n<li><code>.do</code> 和 .<code>flatMap</code> 是 Observable 的運算子。</li>\n</ul>\n<h2 id=\"import\">Import</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://wcc723.github.io/development/2020/03/25/import-export/\">完全解析 JavaScript import、export | 卡斯伯 Blog - 前端，沒有極限</a></li>\n</ul>\n<h2 id=\"whats-this-in-javascript-\">What&#39;s THIS in JavaScript ?</h2>\n<p><a target=\"_blank\" rel=\"nofollow\" href=\"https://kuro.tw/posts/2017/10/12/What-is-THIS-in-JavaScript-%E4%B8%8A/\">What&#39;s THIS in JavaScript ? [上]</a></p>\n<h2 id=\"小技巧\">小技巧</h2>\n<h3 id=\"強制轉換資料型別\">強制轉換資料型別</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -Infinity;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Infinity;</span>\n\n<span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.30000000000000004;</span>\n\n<span class=\"token boolean\">true</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true;</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2;</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true;</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false;</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1;</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true;</span>\n<span class=\"token boolean\">true</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"\"</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object Object][object Object]\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object Object]\"</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1\"</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token string\">\"5\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"53\";</span>\n<span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"35\";</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"031\";</span>\n<span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"04\";</span>\n<span class=\"token string\">\"5\"</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2;</span>\n<span class=\"token string\">\"5\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span>\n<span class=\"token string\">\"15\"</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token string\">\"5\"</span> <span class=\"token operator\">===</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token string\">\"5\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token operator\">+</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n<span class=\"token operator\">-</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -123;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 0, 1, 2, 3, 4 ]</span></code></pre><h3 id=\"4-個-request-的方法\">4 個 request 的方法</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/doriven/items/503fdc6de9bc0e725334\">Native な JavaScript で Fetch API を利用し Ajax を行う</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/katsunory/items/9bf9ee49ee5c08bf2b3d\">Javascript の Ajax についての基本まとめ - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://jzchangmark.wordpress.com/2016/06/12/%E9%80%8F%E9%81%8E-curl%E3%80%81python%E3%80%81postman-%E4%BE%86-request-api/\">透過 curl、Python、Postman 來 Request API - 🐴 的學習筆記</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://realdennis.medium.com/%E4%B8%80%E8%B5%B7%E4%BE%86%E6%8A%8A%E7%85%A9%E4%BA%BA-xmlhttprequest-%E8%AE%8A%E6%88%90-fetch-%E6%80%8E%E9%BA%BC%E6%A8%A3-8657f2854894\">一起來把煩人 XMLHttpRequest 變成 Fetch 怎麼樣？</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/ajax_fetch.html\">AJAX 與 Fetch API · 從 ES6 開始的 JavaScript 學習生活</a></li>\n</ul>\n<h4 id=\"1-xmlhttprequest\">1. XMLHttpRequest</h4>\n<ul>\n<li>js 原生</li>\n<li>難以閱讀與撰寫</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reqOnload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> email <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reqError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://randomuser.me/api/\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> reqOnload<span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> reqError<span class=\"token punctuation\">;</span></code></pre><h4 id=\"2-jqeury\">2. jQeury</h4>\n<ul>\n<li>基於 XHR 開發，然而 XHR 架構不清晰，並已有替代方案</li>\n<li>jQuery 整體項目太大，效益低落</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://tw.alphacamp.co/blog/jquery-javascript-library-overview\">什麼是 jQuery？前端框架盛行還需要 JavaScript 函式庫嗎？｜ ALPHA Camp Blog</a></li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://randomuser.me/api/\"</span><span class=\"token punctuation\">,</span>\n  dataType<span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"3-fetch\">3. Fetch</h4>\n<ul>\n<li>自 ES6 起提供的方式</li>\n<li>概念相近 jQuery 的 <code>$.ajax</code></li>\n<li>使用 ES6 的 Promise 進行回傳，回傳<code>ReadableStream</code>物件</li>\n<li>需搭配 then 與 catch 進行處理</li>\n<li>會將 400，500 都當做請求成功，需要另外做處理</li>\n<li>預設不帶 cookie</li>\n<li>不支援 timeout handle</li>\n<li>不支援監測請求的進度</li>\n<li>較早的瀏覽器並不支援 (IE11 以下不支援)</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://randomuser.me/api/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> email <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"4-axios\">4. Axios</h4>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://eugenesu0515.github.io/Blog/2018/06/25/Vue%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%B4%B9%EF%BC%9Aaxios/\">Vue 套件介紹：axios - Eugene Su</a></li>\n<li>Vue.js 作者推薦使用</li>\n<li>使用需引入 <a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/axios/axios\">axios</a></li>\n<li>概念相近 jQuery 的 <code>$.ajax</code></li>\n<li>可以在 node.js 中使用</li>\n<li>支援防 CSRF</li>\n<li>提供併發請求</li>\n<li>相當輕量，約 13kb</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\naxios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://randomuser.me/api/\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    result<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Execued\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"good-javascript-with-modern-feature-vs-bad-code\"><strong>Good Javascript with modern feature</strong> vs <strong>Bad Code</strong></h3>\n<h4 id=\"consolelog\">console.log</h4>\n<h5 id=\"1-table\">1. table</h5>\n<pre class=\"language-js\"><code class=\"language-js\">cosnt foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> nervous<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\ncosnt bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'dick'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> nervous<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\ncosnt baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'harry'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> nervous<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Bad Code</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Good Code</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c My Friends,\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"color: orange; font-weight: bold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> baz <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> baz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h5 id=\"2-time\">2. time</h5>\n<pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"looper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"looper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h5 id=\"3-trace\">3. trace</h5>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteMe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye bye database\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">deleteMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">deleteMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"destucturing\">destucturing</h4>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> turtle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Bobo\"</span><span class=\"token punctuation\">,</span>\n  legs<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  shell<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"amphibious\"</span><span class=\"token punctuation\">,</span>\n  meal<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  diet<span class=\"token operator\">:</span> <span class=\"token string\">\"berries\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bad Code</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">feed</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Feed </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token punctuation\">.</span>meal<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> kils of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>animal<span class=\"token punctuation\">.</span>diet<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Good Code</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">feed</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> meal<span class=\"token punctuation\">,</span> diet <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Feed </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>meal<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> kilos of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>diet<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">feed</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">animal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> meal<span class=\"token punctuation\">,</span> diet <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> animal<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Feed </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>meal<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> kilos of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>diet<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre><h4 id=\"template-literals\">Template literals</h4>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Bad Code</span>\n<span class=\"token keyword\">let</span> bio <span class=\"token operator\">=</span>\n  horse<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span>\n  <span class=\"token string\">\"is a \"</span> <span class=\"token operator\">+</span>\n  horse<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span>\n  <span class=\"token string\">\" horse skilled in \"</span> <span class=\"token operator\">+</span>\n  horse<span class=\"token punctuation\">.</span>skills<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" &amp; \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Good Code</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> skills <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> horse<span class=\"token punctuation\">;</span>\n\nbio <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>size<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> skilled in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>skills<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" &amp; \"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">horseAge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ageStr <span class=\"token operator\">=</span> age <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"old\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"young\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>ageStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bio2 <span class=\"token operator\">=</span> horseAge<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">This horse is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>horse<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"spread-syntax\">spread syntax</h4>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pikachu <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Pikachu\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stats <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hp<span class=\"token operator\">:</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> attack<span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> defense<span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bad Code</span>\npikachu<span class=\"token punctuation\">[</span><span class=\"token string\">\"hp\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>hp<span class=\"token punctuation\">;</span>\npikachu<span class=\"token punctuation\">[</span><span class=\"token string\">\"attack\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>attack<span class=\"token punctuation\">;</span>\npikachu<span class=\"token punctuation\">[</span><span class=\"token string\">\"defense\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stats<span class=\"token punctuation\">.</span>defense<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// OR</span>\n<span class=\"token keyword\">const</span> lv10 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>pikachu<span class=\"token punctuation\">,</span> stats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lv11 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>pikachu<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> hp<span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Good Code</span>\n<span class=\"token keyword\">const</span> lv10 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>pikachu<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>stats <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> lv11 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>pikachu<span class=\"token punctuation\">,</span> hp<span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"array-1\">Array</h4>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> pokemon <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Arbok\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Raichu\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sandshrew\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bad Code</span>\npokemon<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bulbasaur\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npokemon<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Metapod\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npokemon<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Weedle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Good Code</span>\n\n<span class=\"token comment\">// Push</span>\npokemon <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>pokemon<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulbasaur\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Metapod\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Weedle\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Shift</span>\npokemon <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Bulbasaur\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Metapod\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Weedle\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>pokemon<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"loops\">loops</h4>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> orders <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">223</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bad Code</span>\n<span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> withTax <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> highValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> orders<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Reduce</span>\n  total <span class=\"token operator\">+=</span> orders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Map</span>\n  withTax<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>orders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Filter</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>orders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    highValue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>orders<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Good Code</span>\n<span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> withTax <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">*</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> highValue <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"async--await-1\">async / await</h4>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">random</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bad Code</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sumRandomAsyncNums</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> first<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> second<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> third<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      first <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      second <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      third <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> first <span class=\"token operator\">+</span> second <span class=\"token operator\">+</span> thrid<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Result </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Good Code</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sumRandomAsyncNums</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> thrid <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Result </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>first <span class=\"token operator\">+</span> second <span class=\"token operator\">+</span> thrid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"es6-加進的新功能\">ES6 加進的新功能</h3>\n<h4 id=\"1-default-parameters\">1. Default Parameters</h4>\n<p>更快速的 function 參數給定預設值：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">link</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://example.com\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"2-template-literals\">2. Template Literals</h4>\n<p>允許透過語法 <code>${val}</code> 將變數嵌入至字串中：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Your name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>first<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>last<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"3-multi-line-strings\">3. Multi-line Strings</h4>\n<p>允許使用 `（backticks）接受多行字串指定：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">first line\nsecond line</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"4-destructing-assignment\">4. Destructing Assignment</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">object<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> …rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3, 4, 5]</span>\n\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>p<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> q<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre><h4 id=\"5-object-literals\">5. Object Literals</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">make<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// with property value shorthand</span>\n  <span class=\"token comment\">// syntax, you can omit the property</span>\n  <span class=\"token comment\">// value if key matches variable</span>\n  <span class=\"token comment\">// name</span>\n  make<span class=\"token punctuation\">,</span> <span class=\"token comment\">// same as make: make</span>\n  model<span class=\"token punctuation\">,</span> <span class=\"token comment\">// same as</span>\n  model<span class=\"token operator\">:</span> model\n  value<span class=\"token punctuation\">,</span> <span class=\"token comment\">// same as value: value</span>\n  <span class=\"token comment\">// computed values now work with</span>\n  <span class=\"token comment\">// object literals</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'make'</span> <span class=\"token operator\">+</span> make<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Method definition shorthand syntax</span>\n  <span class=\"token comment\">// omits `function` keyword &amp; colon</span>\n  <span class=\"token function\">depreciate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">-=</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Kia'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Sorento'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"6-arrow-function\">6. Arrow Function</h4>\n<p>箭頭函式亦會更改物件裡的 this 指向行為，從原本的指向呼叫者改為指向其所屬物件</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token parameter\">param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> paramN</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> statements <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> paramN</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> expression\n<span class=\"token comment\">// 等於 : => { return expression; }</span>\n\n<span class=\"token comment\">// 只有一個參數時, 括號才能不加:</span>\n<span class=\"token punctuation\">(</span><span class=\"token parameter\">singleParam</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> statements <span class=\"token punctuation\">}</span>\n<span class=\"token parameter\">singleParam</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> statements <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 若無參數, 就一定要加括號:</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> statements <span class=\"token punctuation\">}</span></code></pre><h4 id=\"7-promise\">7. Promise</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">wait1000</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">wait1000</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yay!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">wait1000</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wheeyee!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"8-let--const-block-scoped\">8. Let &amp; Const, Block-Scoped</h4>\n<ul>\n<li><code>let</code> 和 <code>const</code> 的作用域從之前 <code>var</code> 的函式變成了離此變數最近的 <code>{}</code> 區塊範圍內</li>\n<li><code>let</code> 不可重覆宣告，執行時會吐出錯誤</li>\n<li><code>const</code> 宣告時即須初始化，並且不可修改</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">letExample</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> letValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inside block\"</span><span class=\"token punctuation\">,</span> letValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// [SyntaxError] redeclaration of letValue would be a SyntaxError</span>\n    <span class=\"token keyword\">let</span> letValue <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// [SyntaxError] Accessing letValue is a Reference Error because it</span>\n    <span class=\"token comment\">// was defined w/in if-block</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>letValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// if we get here, it means that the JS engine didn't</span>\n    <span class=\"token comment\">// throw an exception, which means that the engine</span>\n    <span class=\"token comment\">// (or transpiled code) did not faithfully reproduce</span>\n    <span class=\"token comment\">// how let should work</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"let not faithfully handled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// e is a ReferenceError</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"letValue not accessible\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">letExample</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h4 id=\"9-classes\">9. Classes</h4>\n<p>ES6 透過 prototype 和 function 實作出了類 inheritance 結構的 class，但仍和傳統 Java、Python 的 class 有些差別</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' makes a noise.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Lion</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> ' roars<span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre><h4 id=\"10-module\">10. Module</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Export</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAccounts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Import</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> port<span class=\"token punctuation\">,</span> getAccounts <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"qr-code\">QR Code</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/bellbind/items/b80698ceddebb6dfe4aa\">JavaScript で実装してみる QR コードジェネレータ - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://davidshimjs.github.io/qrcodejs/\">qrcode.js</a></li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#qrcode_area\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">QRCode</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#qrcode_area\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>qrcode_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"encode\">Encode</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">base64_encode</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">encode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> encode <span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base64_output <span class=\"token operator\">=</span> <span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base64_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base64_output <span class=\"token operator\">=</span> <span class=\"token function\">atob</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>base64_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> error <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">url_encode</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">encode</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> encode <span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url_output <span class=\"token operator\">=</span> <span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url_output <span class=\"token operator\">=</span> <span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url_input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> error <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">html_encode</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">space</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> html_entities <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'\\\"'</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;quot;'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'&amp;'</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;amp;'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'\\''</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;apos;'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'&lt;'</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;lt;'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'>'</span><span class=\"token operator\">:</span> <span class=\"token string\">'&amp;gt;'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">' '</span><span class=\"token operator\">:</span> space <span class=\"token operator\">?</span> <span class=\"token string\">'&amp;nbsp;'</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>html_output <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>html_input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entity</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> html_entities<span class=\"token punctuation\">[</span>entity<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> entity<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre><h3 id=\"password\">Password</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">passwd_create</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> passwd_num <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> passwd_number_num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_check_number <span class=\"token operator\">?</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_number_num<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> passwd_symbol_num <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_check_symbol <span class=\"token operator\">?</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_symbol_num<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> passwd_num <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> passwd_num <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>passwd_number_num <span class=\"token operator\">+</span> passwd_symbol_num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'入力が不正です。'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_check_lower_letter <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_check_upper_letter<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> passwd_num <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>passwd_number_num <span class=\"token operator\">+</span> passwd_symbol_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'入力が不正です。'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">var</span> kind <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>passwd_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            kind<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> passwd_number_num <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n                kind<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> passwd_symbol_num <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n                kind<span class=\"token punctuation\">[</span>passwd_number_num <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> passwd_num <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token function\">make_random</span><span class=\"token punctuation\">(</span>passwd_num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> index <span class=\"token operator\">==</span> i <span class=\"token operator\">||</span> kind<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> kind<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> kind<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                kind<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kind<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                kind<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">const</span> number_pattern <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> alpha_pattern <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_check_lower_letter <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_check_ecept_lO <span class=\"token punctuation\">)</span>\n                    alpha_pattern <span class=\"token operator\">+=</span> <span class=\"token string\">\"abcdefghijkmnopqrstuvwxyz\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    alpha_pattern <span class=\"token operator\">+=</span> <span class=\"token string\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_check_upper_letter <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_check_ecept_lO <span class=\"token punctuation\">)</span>\n                    alpha_pattern <span class=\"token operator\">+=</span> <span class=\"token string\">\"ABCDEFGHJKLMNPQRSTUVWXYZ\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    alpha_pattern <span class=\"token operator\">+=</span> <span class=\"token string\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">var</span> passwd <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> kind<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> kind<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'n'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token function\">make_random</span><span class=\"token punctuation\">(</span>number_pattern<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    passwd <span class=\"token operator\">+=</span> number_pattern<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> kind<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'s'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> pattern <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_symbol_pattern<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token function\">make_random</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    passwd <span class=\"token operator\">+=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token function\">make_random</span><span class=\"token punctuation\">(</span>alpha_pattern<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    passwd <span class=\"token operator\">+=</span> alpha_pattern<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>passwd_password <span class=\"token operator\">=</span> passwd<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre><h2 id=\"函式庫\">函式庫</h2>\n<h3 id=\"資料處理\">資料處理</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://lodash.com/\">lodash</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://momentjs.com/\">moment.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.chartjs.org/\">Chart.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://sheetjs.com/\">sheetjs</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/paulhodel/jexcel\">jExcel</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/newsdev/archieml-js\">newsdev/archieml-js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/cheeriojs/cheerio\">cheerio</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.npmjs.com/package/delay\">delay</a></li>\n</ul>\n<h3 id=\"圖型繪製\">圖型繪製</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/gka/chroma.js\">chroma.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/bugsnag/chromatic-sass\">chromatic-sass</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/IonicaBizau/image-to-ascii\">image-to-ascii</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/sujoyu/dxm-text-animation\">dxm-text-animation</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.highcharts.com/\">HIGHCHARTS</a></li>\n</ul>\n<h3 id=\"動態效果\">動態效果</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://threejs.org/docs/\">Three.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://animejs.com/\">anime.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/mojs/mojs\">mojs/mojs</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/julianshapiro/velocity\">julianshapiro/velocity</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/popmotion/popmotion\">Popmotion/popmotion</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/maxwellito/vivus\">maxwellito/vivus</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://greensock.com/get-started-js\">GSAP 生態系</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/pn299pn/items/e6b9f7a61d895923e55e\">CreateJS でオブジェクトを操作してみた</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/jlmakes/scrollreveal\">jlmakes/scrollreveal</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/thednp/kute.js/\">thednp/kute.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/mattboldt/typed.js\">mattboldt/typed.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://greensock.com/timelinemax\">TimelineMax</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://greensock.com/ease-visualizer\">Easeing</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://pixijs.io/pixi-filters/tools/demo/\">Pixi.JS</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"http://brm.io/matter-js/\">matter.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://p5js.org/\">p5.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/photonstorm/phaser\">phaser</a></li>\n<li>Textillate.js</li>\n<li>BounceJS</li>\n<li>DynamicJS</li>\n<li>ParticleJS</li>\n<li>MoveJS</li>\n<li>HoverIntent</li>\n<li>JqueryTransit</li>\n<li>FlyingCodeJS</li>\n</ul>\n<h3 id=\"其它\">其它</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://introjs.com/\">intro.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://darkmodejs.learn.uno/\">Darkmode.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/dataarts/dat.gui\">dat.gui</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://daybrush.com/scenejs/\">scene.js</a></li>\n</ul>\n<h3 id=\"d3js\">D3.js</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://bl.ocks.org/mbostock/1256572\">D3.js Show Reel</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.d3-graph-gallery.com/\">The D3 Graph Gallery – Simple charts made with d3.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"http://d3indepth.com/\">Learn D3.js step by step</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/@mybaseball52/d3-js-%E7%9A%84%E7%A0%94%E7%A9%B6-21da2ab7a2bb\">D3.js 的研究 - 黃冠融 - Medium</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/@mybaseball52/d3-js-basics-of-drawing-charts-4580dca5cee3\">D3.js 基礎繪圖</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/@mybaseball52/%E5%A2%9E%E5%BC%B7-d3-js-%E7%9A%84%E8%A6%96%E8%A6%BA%E5%8C%96%E5%8A%9F%E8%83%BD-9497f8553790\">增強 D3.js 的視覺化功能</a></li>\n</ul>\n<h4 id=\"處理資料\">處理資料</h4>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/d3/d3/wiki/%E6%95%B0%E7%BB%84\">数组 · d3/d3 Wiki</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://observablehq.com/@stuartathompson/the-difference-between-d3-nest-d3-map-and-data-map\">The difference between d3.nest(), d3.map() and data.map / Stuart Thompson / Observable</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://amber.rbind.io/2017/05/02/nesting/\">Nesting and Accessing Data in D3v4 | Amber Thomas Data Portfolio &amp; Blog</a></li>\n</ul>\n<h4 id=\"定義比例--scalelinear-\">定義比例 ( <code>scale.linear()</code> )</h4>\n<ul>\n<li>Scale 分為兩大類，一類是以數字或日期為比例縮放的「Quantitative」，一類是是以自訂的名稱或標籤為縮放依據的「Ordinal」</li>\n<li>Quantitative Scale 分為 linear、pow、log、quantize、threshold、quantile 和 identity，其中以 linear 最常使用</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.oxxostudio.tw/articles/201411/svg-d3-03-scale-linear.html\">SVG D3.js - 定義比例 ( scale.linear() ) - OXXO.STUDIO</a></li>\n</ul>\n<h4 id=\"繪製線段\">繪製線段</h4>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.d3-graph-gallery.com/graph/custom_axis.html\">Drawing axis in d3.js</a></li>\n<li><code>line()</code></li>\n<li><code>.interpolate()</code></li>\n</ul>\n<h3 id=\"quicksettings\"><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/bit101/quicksettings\">quicksettings</a></h3>\n<p><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/quicksettings@latest/quicksettings.min.js&quot;&gt;&lt;/script&gt;</code></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> settings <span class=\"token operator\">=</span> QuickSettings<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">-</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// input:text</span>\nsettings<span class=\"token punctuation\">.</span><span class=\"token function\">addTest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cat<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// checkbox</span>\nsettings<span class=\"token punctuation\">.</span><span class=\"token function\">addBoolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sleep\"</span><span class=\"token punctuation\">,</span> cat<span class=\"token punctuation\">.</span>isSleep<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cat<span class=\"token punctuation\">.</span><span class=\"token function\">setSleep</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// button</span>\nsettings<span class=\"token punctuation\">.</span><span class=\"token function\">addButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"meow\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cat<span class=\"token punctuation\">.</span><span class=\"token function\">meow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h2 id=\"框架\">框架</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.meteor.com/\">Open Source Javascript Platform for Web, Mobile, and Desktop | Meteor</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://koajs.com/\">Koa - next generation web framework for node.js</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/alpinejs/alpine\">alpinejs/alpine: A rugged, minimal framework for composing JavaScript behavior in your markup.</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://nestjs.com/\">NestJS - A progressive Node.js framework</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://adonisjs.com/?fbclid=IwAR3-RUQoWibCTQnSJrnKuEC6hD8PGBCoVAGn38PP0BjgsGSpp7DUDrIZOME\">AdonisJs - Node.js web framework</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/m_mitsuhide/items/00b139bb565dddf8006a\">frourio</a></li>\n</ul>\n<h2 id=\"進階\">進階</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://ithelp.ithome.com.tw/users/20065504/ironman/1259\">重新認識 JavaScript 系列</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://johnresig.com/apps/learn/\">Learning Advanced JavaScript</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://chupainotebook.blogspot.com/search/label/%E5%85%8B%E6%9C%8D%20JS%20%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86\">克服 JS 的奇怪部份</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/stephentian/33-js-concepts\">JavaScript 开发者应懂的 33 个概念</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/oimo23/items/b380a914867ec973039a\">【翻訳】JavaScript 開発者が知るべき 33 のコンセプト リンク集 - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/rana_kualu/items/6bcc99226be741348c34\">2016 年から 2019 年までの JavaScript の全て</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch1.md\">You Don&#39;t Know JS Yet: Get Started - 2nd Edition</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/AllJointTW/clean-code-javascript\">無瑕的程式碼 JavaScript</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2017/07/15/javascript-event-propagation/\">DOM 的事件傳遞機制：捕獲與冒泡</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/enjoy-life-enjoy-coding/javascript-%E9%97%9C%E6%96%BC-object-%E4%B8%80%E5%8F%A3%E6%B0%A3%E5%85%A8%E8%AA%AA%E5%AE%8C-4bb924bcc79f\">JavaScript | 關於 Object ，一口氣全說完</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://www.infoq.cn/article/jPF4p0Srd9qhVbWMaOFh\">有趣的 JavaScript 运算符用法</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://davidwalsh.name/javascript-tricks\">7 Useful JavaScript Tricks</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/walkout/js-%E5%8E%9F%E5%8A%9B%E8%A6%BA%E9%86%92-day13-event-queue-event-loop-event-table-374fbbef3e40\">JS 原力覺醒 — Event Queue &amp; Event Loop 、Event Table</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.huli.tw/2020/04/18/javascript-function-is-awesome/\">覺得 JavaScript function 很有趣的我是不是很奇怪 - Huli</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/kozzzz/items/b4cd57ead41fc6355afd\">[JavaScript]初心者が初見で必ず thinking 顔になるもの特集 - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/uhyo/items/4cef6d0b52ffd20c1af4\">なぜ JavaScript の Date コンストラクタは例外を投げないのか - Qiita</a></li>\n</ul>\n<h2 id=\"typescript\">TypeScript</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://willh.gitbook.io/typescript-tutorial/\">TypeScript 新手指南</a></li>\n</ul>\n","date":"2019-07-18T07:10:16.000Z","excerpt":"","printDate":"July 18, 2019","printReadingTime":"20 min read"}