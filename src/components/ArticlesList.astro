---
import { getAllBlogs } from "../scripts/blog";
const posts = await getAllBlogs();
const allPostsYears = [
  ...new Set(posts.map((p) => new Date(p.date).getFullYear())),
].sort((a, b) => b - a);
---

{
  allPostsYears.map((year) =>
    <div class="articles-list--container">
      <h2>{year}</h2>
      <ul class="articles-list">
        {posts
          .filter(
            (post) => new Date(post.date).getFullYear() === year
          )
          .map((post) => (
            <li>
              <div class="articles-list--link">
                <time>
                  {new Date(post.date).toLocaleDateString("en-US", { month: "2-digit", }) +
                    "/" +
                    new Date(post.date).toLocaleDateString("en-US", { day: "2-digit", })
                  }
                </time>
                <a href={`./${post.slug}`} >{post.title}</a>
              </div>
            </li>
          ))}
      </ul>
      <div class="articles-list--bordered-title">{year}</div>
    </div>
  )
}

<style>
  .articles-list--container {
    margin-top: 1em;
    border: 1px solid var(--subtitle-color);
    box-shadow:
      2px 2px 0 var(--subtext-color),
      4px 4px 0 var(--title-color);

    position: relative;
    background-color: #e5edc8;

    z-index: 10;
    overflow: clip;
    overflow: hidden;
  }

  .articles-list--container h2 {
    margin: 0;
  }

  .articles-list {
    margin: 0;
    padding-left: 1em;
    padding-right: 1em;
    padding-bottom: 0.375em;
    list-style-position: inside;
  }

  .articles-list li {
    list-style-type: "◼";
    color: var(--title-color);

    display: flex;
    justify-content: space-between;
    align-items: center;

    line-height: 1;
  }
  .articles-list li + li {
    margin-top: 0.35em;
  }
  .articles-list li::marker {
    content: "◼";
    color: var(--title-color);
    display: inline-block;
  }

  .articles-list--tags {
    display: inline-block;
  }
  .articles-list--link {
    margin-left: 0.5em;
    display: flex;
    align-items: center;
  }
  .articles-list--link::before {
    content: "◼";
    color: var(--title-color);
  }
  .articles-list--link time {
    white-space: nowrap;
  }
  .articles-list--link a {
    padding-left: 0.5em;
  }

  .articles-list--tags {
    flex-shrink: 0;
  }

  .articles-list--bordered-title {
    font-size: 8em;
    color: #e5edc8;
    text-shadow:
      -1px 1px 0 var(--subtitle-color),
      1px 1px 0 var(--subtitle-color),
      1px -1px 0 var(--subtitle-color),
      -1px -1px 0 var(--subtitle-color);
    position: absolute;
    right: 0.125em;
    bottom: -0.4em;
    z-index: -1;
    opacity: 0.5;
    user-select: none;

    font-family:
      -apple-system,
      BlinkMacSystemFont,
      ヒラギノ角ゴ Pro W3,
      Hiragino Kaku Gothic Pro,
      メイリオ,
      Meiryo,
      ＭＳ\Ｐゴシック,
      MS PGothic,
      "Segoe UI",
      Roboto,
      Oxygen-Sans,
      Ubuntu,
      Cantarell,
      "Helvetica Neue",
      Helvetica,
      sans-serif;
    font-style: italic;
    font-weight: bold;
  }

  @media (max-width: 720px) {
    ul li {
      min-width: 0;
    }
    .articles-list--link {
      text-overflow: ellipsis;
      overflow-x: hidden;
      white-space: nowrap;

      display: list-item;
    }
    .articles-list--link a {
      padding-left: 0;
    }
    .articles-list--tags {
      display: none;
    }
    .articles-list--link::before {
      content: "";
    }
  }

  ul li a {
    margin-left: 2px;
    letter-spacing: 0.52px;
    font-size: 1.125em;
  }
  ul li time {
    margin-left: 0.25rem;
    font-size: 0.75rem;
    color: var(--text-color);
  }
</style>
