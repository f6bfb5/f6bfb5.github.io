{"title":"Docker 筆記","slug":"docker-note","html":"<p>Docker 的出現，是為了解決在 deploy 作業途中時會出現的各種問題。</p>\n<h2 id=\"deploy-的歷史\">Deploy 的歷史</h2>\n<p>早前的網路環境（約莫至 1990 年左右）是以一台大型電腦做為伺服器，處理所有的 request，但是這樣的設計會受限於製造商的品牌硬體，造成高成本、欠缺柔軟性和擴充性的問題。</p>\n<p>之後技術進步，隨著小型電腦的性能提升與價格下降，出現了串接多台小型電腦，設置分散系統與功能的構築手法，這種手法稱為 Engine downsizing，成為了當時的主流作法，但這波變化又帶來了新的問題。</p>\n<h3 id=\"虛擬化\">虛擬化</h3>\n<p>首先不難想像的是，隨著電腦增加造成管理與使用上的困難，有 100 台電腦，就需要進行 100 次的環境設定，若之後有更新，也要 100 台電腦全部都裝過一遍，並且這些電腦不會經常保持滿載處理，而是總會有閒置中的電腦。</p>\n<p>在安全性與維護性上也有所疑慮，當其中一台電腦受到攻擊，就會影響到所有在上面執行的程式。</p>\n<p>以及隨著作業系統的多樣化，會有程式無法在不相容的伺服器上執行，這時出現了「虛擬化」，透過軟體來整合多種硬體，能夠自由模擬各種規格的電腦環境。</p>\n<p>雖然虛擬化以及虛擬機器的登場，解決了許多 deploy 時會遇到的問題，但虛擬機器也有其弱點，那就是在系統背後執行的，其它與程式無關的系統服務，會造成大量的系統開銷與資源浪費。</p>\n<h3 id=\"容器（container）虛擬化\">容器（Container）虛擬化</h3>\n<p>於是「容器虛擬化」誕生了。容器虛擬化指的是，把執行的程式從開發與執行環境隔離開來，如此能夠安全並且快速地執行多個程式。並且這套技術不需要安裝新的作業系統，而是透過系統裡的多個功能，讓應用程式在同一個作業系統上，但執行於不同的容器隔離空間中。</p>\n<h3 id=\"docker\">Docker</h3>\n<p>Docker 就是使用了容器虛擬化概念的應用程式之一，另外也有許多其它使用容器虛擬化的應用程式。</p>\n<p>Docker 以名為 <code>Dockerfile</code> 的檔案為基礎來產生容器（執行程式），Docker 會依照檔案內所記載的，依序執行指令。因此擁有 1. 能夠簡單多次產生容器 2. 能夠將容器帶著走 3. 能夠簡便管理應用程式的版本 等等許多優點。</p>\n<p>原本 Docker 是 LinuxOS 專用的功能，之後 macOS 和 Windows 上面也有了如 <code>Docker Desktop for Mac</code> 或 <code>Docker for Windows</code> 這類先於電腦上執行 Linux 環境的虛擬機器，再於其中執行 Docker 的應用程式。</p>\n<h2 id=\"安裝\">安裝</h2>\n<h3 id=\"mac、windows\">MAC、Windows</h3>\n<p>目前在 MAC 和 Windows 上面也可以使用 docker，從官方網站 <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.docker.com/products/docker-desktop\">Docker Desktop for Mac and Windows</a> 裡下載並安裝之後，在 terminal 裡輸入 <code>docker --version</code> 和 <code>docker-compose --version</code> 有出現版本號，就代表安裝成功。</p>\n<p>Windows 版會推薦先安裝 WSL2（Windows Subsystem for Linux，於 Windows 上執行的 Linux 子系統），之後再安裝 docker，可以參照下列流程。</p>\n<h4 id=\"1-啟用虛擬機器平台\">1. 啟用虛擬機器平台</h4>\n<ol>\n<li>開啟控制台（control panel）</li>\n<li>開啟「程式集」</li>\n<li>開啟「開啟或關閉 Windows 功能」</li>\n<li>勾選「虛擬機器平台」</li>\n</ol>\n<h4 id=\"2-安裝-wsl2\">2. 安裝 WSL2</h4>\n<ol>\n<li>以管理者權限開啟 PowerShell</li>\n<li>執行指令 <code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code></li>\n<li>從微軟官方網站<a target=\"_blank\" rel=\"nofollow\" href=\"https://docs.microsoft.com/zh-tw/windows/wsl/wsl2-kernel\">下載 WSL2 Linux 核心更新套件</a></li>\n<li>從 MicrosoftStore 安裝 Ubuntu 18.04LTS</li>\n</ol>\n<h4 id=\"3-安裝-docker-desktop\">3. 安裝 Docker Desktop</h4>\n<p>從官方網站 <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.docker.com/products/docker-desktop\">Docker Desktop for Mac and Windows</a> 裡下載並安裝 Docker Desktop。</p>\n<h3 id=\"linux\">Linux</h3>\n<ul>\n<li>移除舊版本：<code>sudo apt-get remove docker docker-engine docker.io</code></li>\n<li>使用腳本安裝：<code>curl -fsSL https://get.docker.com -o get-docker.sh</code>\n<br><code>sudo sh get-docker.sh</code></li>\n<li>若想使用非 root 使用者執行 docker，可將此使用者加至 <code>docker</code> 身份組中</li>\n<li><code>sudo usermod -aG docker your-user</code></li>\n</ul>\n<h2 id=\"使用\">使用</h2>\n<ul>\n<li><code>docker images</code>：查看 images</li>\n<li><code>docker run</code>：執行 images</li>\n<li><code>docker ps</code>：查看執行中的 container</li>\n<li><code>top</code>、<code>htop</code>、<code>ctop</code>、<code>gtop</code>、<code>conky</code>：監看工具</li>\n</ul>\n<h3 id=\"撰寫-dockerfile\">撰寫 Dockerfile</h3>\n<pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"># fetch node v4 LTS codename argon\nFROM node:argon\n\n# Request samplename build argument\nARG samplename\n\n# Create app directory\nRUN mkdir -p /usr/src/spfx-samples\nWORKDIR /usr/src/spfx-samples\n\n# Install app dependencies\nRUN git clone https://github.com/SharePoint/sp-dev-fx-webparts.git .\nWORKDIR /usr/src/spfx-samples/samples/$samplename\n\n# Install gulp on a global scope\nRUN npm install gulp -g\n\n# RUN [\"npm\", \"install\", \"gulp\"]\nRUN npm install\nRUN npm cache clean\n\n# Expose required ports\nEXPOSE 4321 35729 5432\n\n# Run Sample\nCMD [\"gulp\", \"serve\"]</code></pre><h2 id=\"參考資料\">參考資料</h2>\n<ul>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/gold-kou/items/44860fbda1a34a001fc1\">いまさらだけど Docker に入門したので分かりやすくまとめてみた - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/Michinosuke/items/5778e0d9e9c04038903c\">Docker を体系的に学べる公式チュートリアル和訳 - Qiita</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/etaroid/items/b1024c7d200a75b992fc\">【図解】Docker の全体像を理解する -前編-</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/bremen/items/4604f530fe25786240db\">「Docker」を全く知らない人のために「Docker」の魅力を伝えるための「Docker」入門</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/takuya_tsurumi/items/182d2de3f3ce7bb63edb\">Docker を体系的に学び直してみた(導入編)</a></li>\n<li><a target=\"_blank\" rel=\"nofollow\" href=\"https://qiita.com/yoskeoka/items/01c52c069123e0298660\">Docker で立ち上げた開発環境を VS Code で開く!</a></li>\n</ul>\n","date":"2020-08-21T15:12:42.000Z","excerpt":null,"printDate":"August 21, 2020","printReadingTime":"2 min read","tags":[],"image":"https://f6bfb5.github.io/preview/docker-note.png"}