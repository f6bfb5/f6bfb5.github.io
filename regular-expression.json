{"title":"正規表達式 Regular Expression","slug":"regular-expression","html":"<style>\ntable {\n  width: 100%;\n}\ntable td:nth-child(1) {\n  width: 25%;\n}\ntable td:nth-child(3) {\n  width: 20%;\n}\n</style>\n\n<h2 id=\"基礎介紹\">基礎介紹</h2>\n<p>正規表達式（Regular Expression，常簡寫為 RegEx）是表達一串文字是否符合特定規則的搜尋用模型（pattern），常見頭尾以斜線 <code>/</code> 包住，字尾加上額外的搜尋條件</p>\n<p>例如可以使用 <code>/^09\\d{2}-?\\d{3}-?\\d{3}$/</code> 這段表達手機號碼的正規表達式，來自動判斷某串數字是否的確是一串手機號碼</p>\n<p>在正規表達式裡，有一系列的對應符號可以用來表達相應的文字規律，例如上面範例裡的 <code>\\d</code>，可以從底下的特殊字元部份知道，這是代表「數字」的意思，跟在後面的 <code>{2}</code> 則是指「這個字元（<code>\\d</code> 所以是數字）會出現 2 次」，<code>?</code> 是「這個字元（<code>-</code>）是不是沒有出現，或者只出現一次」，以下是常用的符號介紹：</p>\n<h3 id=\"指定字元\">指定字元</h3>\n<table>\n<thead>\n<tr>\n<th>記述</th>\n<th>內容</th>\n<th>範例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>.</code></td>\n<td>任意字元</td>\n<td><code>.n</code></td>\n</tr>\n<tr>\n<td><code>[]</code></td>\n<td>指定之字元</td>\n<td><code>[aeiou]</code></td>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td>指定之字串</td>\n<td><code>(string)</code></td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td>範圍內字元</td>\n<td><code>[a-zA-Z]</code></td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>排除字元</td>\n<td><code>[^a]</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"字元次數\">字元次數</h3>\n<table>\n<thead>\n<tr>\n<th>記述</th>\n<th>內容</th>\n<th>範例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>*</code></td>\n<td>任意數量</td>\n<td><code>bo*</code></td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td>至少一個</td>\n<td><code>a+</code></td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td>零或一個</td>\n<td><code>e?le?</code></td>\n</tr>\n<tr>\n<td><code>{次數}</code></td>\n<td>指定數量</td>\n<td><code>a{2}</code></td>\n</tr>\n<tr>\n<td><code>{下限, 上限}</code></td>\n<td>指定範圍</td>\n<td><code>a{1,3}</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"字元位置\">字元位置</h3>\n<table>\n<thead>\n<tr>\n<th>記述</th>\n<th>內容</th>\n<th>範例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>^</code></td>\n<td>以此開頭</td>\n<td><code>^A</code></td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>以此結尾</td>\n<td><code>t$</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"特殊字元\">特殊字元</h3>\n<p>正規表達式有一系列代表指定範圍的特殊記述：</p>\n<table>\n<thead>\n<tr>\n<th>記述</th>\n<th>內容</th>\n<th>等同</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>\\d</code></td>\n<td>數字</td>\n<td><code>[0-9]</code></td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>文數字與底線字元 (_)</td>\n<td><code>[A-Za-z0-9_]</code></td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>space 字元</td>\n<td><code>[\\n\\r\\t]</code></td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>排除數字</td>\n<td></td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>排除文數字</td>\n<td></td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>排除 space 類型字元</td>\n<td></td>\n</tr>\n<tr>\n<td><code>\\n</code></td>\n<td>換行符號 line feed</td>\n<td></td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>換行符號 carriage return</td>\n<td></td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>定位字元 (tab)</td>\n<td></td>\n</tr>\n<tr>\n<td><code>\\v</code></td>\n<td>垂直定位字元 (vertical tab)</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>由於字元集與系統差異的原因，目前存在有使用 <code>LF</code>（Line feed，U+000A）、<code>CR</code>（Carriage Return，U+000D）和兩者併用的 <code>CR+LF</code>，可以使用 <code>[\\r\\n]</code> 來選取所有換行符號</p>\n<p>由於這些字元在正規表達式裡具有特殊意義，想要選取 <code>[\\$.|?*+( )</code> 這些特殊字元時，都需要在前面加上 <code>\\</code> ，避開它原有的特殊意義，例如：<code>\\$</code>、<code>\\*</code>。</p>\n<h3 id=\"modifiers\">Modifiers</h3>\n<p>在 JavaScript 中，使用 RegEx 可以於第二個斜線後再加上 modifier，指定進一步的選取條件，例如：<code>var patt = /w3schools/i</code> 會指定大小寫也要完全一致</p>\n<table>\n<thead>\n<tr>\n<th>記述</th>\n<th>內容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>g</td>\n<td>搜尋所有對應內容</td>\n</tr>\n<tr>\n<td>i</td>\n<td>搜尋大小寫完全一致</td>\n</tr>\n<tr>\n<td>m</td>\n<td>搜尋多行內容</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用範例\">常用範例</h3>\n<ul>\n<li>西元生日: <code>/^[1-9]\\d{3}-\\d{2}-\\d{2}$/</code></li>\n<li>身分證字號: <code>/^[A-Z]\\d{9}$/</code></li>\n<li>Gmail 信箱: <code>/^\\w+@gmail.com$/</code></li>\n<li>四則運算式: <code>/^[\\d+-*\\/]*$/</code></li>\n</ul>\n<h2 id=\"在-vscode-上使用正規表達式快速處理文字\">在 VSCode 上使用正規表達式快速處理文字</h2>\n<p>在 VSCode 的搜尋功能內使用正規表達式符號時\n<br>需啟用正規表達式搜尋功能（快捷鍵為 <code>Alt+R</code>）\n<br>但不需在前後加上 <code>//</code>\n<br>可以用 <code>Alt + Enter</code> 一次選取所有符合規則的字元</p>\n<h2 id=\"在-javascript-裡使用正規表達式\">在 JavaScript 裡使用正規表達式</h2>\n<p>想在 JavaScript 上使用正規表達式，需先宣告一前後由 <code>/</code> 包圍的字串：</p>\n<p><code>var re = /ab+c/;</code></p>\n<p>或呼叫 <code>RegExp</code> 物件的建構函式：</p>\n<p><code>var re = new RegExp(&#39;ab+c&#39;);</code></p>\n<p>宣告完畢後，可搭配此變數與一字串 <code>str</code> 使用以下函式：</p>\n<table>\n<thead>\n<tr>\n<th>函式</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>re.test(str)</code></td>\n<td>搜尋 <code>str</code> 字串是否有部分符合，回傳 boolean</td>\n</tr>\n<tr>\n<td><code>re.exec(str)</code></td>\n<td>搜尋 <code>str</code> 字串是否有部分符合，並回傳為 Array，若無則回傳 <code>null</code></td>\n</tr>\n<tr>\n<td><code>str.match(re)</code></td>\n<td>搜尋 <code>str</code> 字串是否有部分符合，並回傳為 Array，若無則回傳 <code>null</code></td>\n</tr>\n<tr>\n<td><code>str.search(re)</code></td>\n<td>搜尋 <code>str</code> 字串是否有部分符合，並回傳 index，若無則回傳 <code>-1</code></td>\n</tr>\n<tr>\n<td><code>str.replace(re, newSubstr)</code></td>\n<td>搜尋 <code>str</code> 字串是否有部分符合，並以 <code>newSubstr</code> 取代該內容</td>\n</tr>\n<tr>\n<td><code>str.split(re)</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>例如想要快速取得 YouTube 直播聊天室的網址，就可透過正規表達式來比對影片網址：\n<br/>（雖然取得直播網址的時候通常不會有這麼多種變化格式，以及如果 playlist 參數先放在 v 之前也可能會出錯。實際上很可能也只需要比對 <code>[0-9a-zA-Z_-]{11}</code> 就能取得直播 ID 了。）</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> preRe <span class=\"token operator\">=</span>\n  <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">((http:\\/\\/)|(https:\\/\\/))?((youtu\\.be\\/)|((www\\.youtube\\.com\\/)+((watch\\?v=)|(v\\/))))</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vidRe <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[0-9a-zA-Z_-]{11}</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// different pattern of url of YouTube video</span>\n<span class=\"token keyword\">let</span> urlsForTest <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"https://www.youtube.com/watch?v=gRr4fDVpw2c\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"http://www.youtube.com/watch?v=gRr4fDVpw2c&amp;feature=featured\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"https://youtu.be/gRr4fDVpw2c\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"http://www.youtube.com/v/gRr4fDVpw2c?fs=1&amp;hl=en_US\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"https://www.youtube.com/watch?v=gRr4fDVpw2c&amp;list=PL7LdRPp7xCkP9JJYvAqrQJLScbSol7S4-&amp;index=2\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> liveChatUrlPrefix <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.youtube.com/live_chat?v=\"</span><span class=\"token punctuation\">;</span>\n\nurlsForTest<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>liveChatUrlPrefix <span class=\"token operator\">+</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>preRe<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>vidRe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// https://www.youtube.com/live_chat?v=gRr4fDVpw2c</span></code></pre><h2 id=\"相關工具\">相關工具</h2>\n<table>\n<thead>\n<tr>\n<th>名稱</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a target=\"_blank\" rel=\"nofollow\" href=\"https://regex101.com/\">Regex101</a></td>\n<td>驗證內容是否符合表達式</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"nofollow\" href=\"https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24\">Regulex</a></td>\n<td>圖象化表達式內容</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"nofollow\" href=\"https://ihateregex.io/\">iHateRegex</a></td>\n<td>表達式 snippet</td>\n</tr>\n<tr>\n<td><a target=\"_blank\" rel=\"nofollow\" href=\"https://regexcrossword.com/\">Regex Crossword</a></td>\n<td>正規表達式字謎遊戲</td>\n</tr>\n</tbody></table>\n","date":"2019-09-17T20:08:26.000Z","excerpt":null,"printDate":"September 17, 2019","printReadingTime":"3 min read","tags":["Toolbox"],"image":"https://f6bfb5.github.io/preview/regular-expression.png"}