{"title":"CSS - Susy 3 快速計算排版欄寬與間隔的 library","slug":"css-susy3","html":"<h2 id=\"what-is-susy-3？\">What is Susy 3？</h2>\n<p>Susy 是一套 Sass 的響應式版面引擎，在還沒有 flexbox 和 grid 的時候，Susy 提供了一系列的 Sass function ，可以搭配變數快速計算出網格分割的尺寸、處理斷點變版，讓工程師不再需要苦於自行處理數值，到了 Susy 3 之後，則簡化成了可以與 flexbox 和 float 搭配使用的功能性 library。</p>\n<p>Susy 3 提供了無前綴詞彙的 <code>sass/susy</code> 與附前綴詞彙的 <code>sass/susy-prefix</code> 兩種版本可以使用。以計算內容總寬度的 <code>span()</code> function 為例，附前綴詞彙版本需要改為使用 <code>susy-span()</code>。</p>\n<p>官方提供了<a target=\"_blank\" rel=\"nofollow\" href=\"https://www.oddbird.net/susy/docs/\">一系列的匯入方式</a>，除了直接自 CSS 檔案引用路徑之外，也可以使用 Eyeglass、Webpack、Gulp、Grunt 等打包工具匯入。</p>\n<h2 id=\"設定容器欄位\">設定容器欄位</h2>\n<p>Susy 3 以變數設定容器要切分成幾份欄位，並將客製化的分割方式儲存於 <code>$susy</code> 變數裡，此變數有四個預設屬性：</p>\n<ol>\n<li><code>columns</code>：各欄寬度，類似 grid 的 <code>grid-template-columns</code></li>\n<li><code>gutters</code>：各欄之間的間隔，類似 grid 的 <code>grid-column-gap</code></li>\n<li><code>spread</code>：設定跨欄內容的間隔模式</li>\n<li><code>container-spread</code>：設定容器外圍的間隔模式</li>\n</ol>\n<pre class=\"language-scss\"><code class=\"language-scss\">$susy: (\n  \"columns\": susy-repeat(4),\n  \"gutters\": 0.25,\n  \"spread\": \"narrow\",\n  \"container-spread\": \"narrow\",\n);</code></pre><p>除了附單位的值之外，也可以使用無單位數字來設定響應式的欄位寬度——類似於 CSS 變數單位中的 <code>fr</code>，或是使用 <code>susy-repeat($count, $value)</code> 函式設定連續欄寬——類似於 CSS 原生的 <code>repeat()</code>。</p>\n<p>間隔模式有 <code>narrow</code>（預設值）、<code>wide</code>、<code>wider</code> 三種值可以設定，但使用前需將 <code>box-sizing</code> 設定為 <code>border-box</code>。這部份單看文字或許比較難以理解，可以參考 <a target=\"_blank\" rel=\"nofollow\" href=\"https://www.oddbird.net/2017/06/13/susy-spread/\">Understanding &#39;Spread&#39; in Susy3</a> 一文。</p>\n<ol>\n<li><code>narrow</code>：欄位的兩端無間隔</li>\n<li><code>wide</code>：每個欄位左右皆會有間隔</li>\n<li><code>wider</code>：欄位的兩端會多一份間隔</li>\n</ol>\n<p>也可以使用 <code>susy-settings()</code> 函式覆寫所有設定，或是使用 <code>susy-get()</code> 修改單獨設定。</p>\n<h2 id=\"設定元素佔比\">設定元素佔比</h2>\n<p>Susy 3 裡有 3 個 function 可以取得相關數值，分別是 <code>span()</code>、<code>gutter()</code>、<code>slice()</code>，以及使用兩個關鍵字 <code>at</code> 選取位置，<code>of</code> 選取欄數，將對應的 function 指定至 CSS 屬性上，即可簡化許多計算</p>\n<ol>\n<li><code>span()</code>：取得欄寬，例如 <code>span(6 of 12)</code> 會取得 12 欄中 6 欄的寬度，並同時處理減去間隔的計算</li>\n<li><code>gutter()</code>：取得間隔寬，例如 <code>gutter(of 6)</code> 取得 6 欄中單欄的間隔寬</li>\n<li><code>slice()</code>：取得欄的子集，適合用於格線不對稱時，例如 <code>susy-slice(3 at 3 of (1 2 3 5 8))</code> 是從 <code>(1 2 3 5 8)</code> 寬度的格線裡，自第 3 欄開始，選取 3 欄，最後得到結果會為 <code>3 5 8</code></li>\n</ol>\n<pre class=\"language-scss\"><code class=\"language-scss\">.floats {\n  float: left;\n  width: span(3 of 6); // 48.27586%;\n  margin-left: gutter(of 6); // 3.44828%;\n}</code></pre><h2 id=\"斷點設計\">斷點設計</h2>\n<p>如果想在不同的斷點改變排板，我們會需要在不同的 media query 裡都重新設定一次全域變數，造成反覆撰寫的問題，Susy 官方再提供了<a target=\"_blank\" rel=\"nofollow\" href=\"https://www.oddbird.net/2017/09/25/susy-use/\">兩個 mixin</a>，可以傳入斷點變數，簡化設定修改</p>\n<h3 id=\"1-susy-use\">1. <code>susy-use</code></h3>\n<p>從 media query 裡獨立斷點變數。</p>\n<pre class=\"language-scss\"><code class=\"language-scss\">@mixin susy-use($config) {\n  $config: susy-compile($config);\n\n  $global: $susy;\n  $susy: map-merge($susy, $config) !global;\n\n  @content;\n\n  $susy: $global !global;\n}</code></pre><p>範例：</p>\n<pre class=\"language-scss\"><code class=\"language-scss\">// 變數儲存不同斷點的欄位與間隔設定\n$medium: (\n  \"columns\": susy-repeat(8),\n  \"gutters\": 1em,\n);\n\n@media (min-width: 30em) {\n  @include susy-use($medium) {\n    // 使用 susy-use mixin 與變數套用斷點設定\n  }\n}</code></pre><h3 id=\"2-susy-at\">2. <code>susy-at</code></h3>\n<p>可以直接在 media query 之外的變數裡設定斷點大小。\n※使用此 mixin 亦需引入 <code>susy-use</code>！</p>\n<pre class=\"language-scss\"><code class=\"language-scss\">@mixin susy-at($config) {\n  $config: susy-compile($config);\n\n  $min: map-get($config, \"min-width\");\n  $min: if($min, \"(min-width: #{$min})\", null);\n  $max: map-get($config, \"max-width\");\n  $max: if($max, \"(max-width: #{$max})\", null);\n\n  $and: if($min and $max, \"#{$min} and #{$max}\", null);\n\n  $query: $and or $min or $max;\n\n  @media #{$query} {\n    @include susy-use($config) {\n      @content;\n    }\n  }\n}</code></pre><p>範例：</p>\n<pre class=\"language-scss\"><code class=\"language-scss\">// 變數儲存不同斷點的斷點大小、欄位與間隔設定\n$medium: (\n  \"min-width\": 30em,\n  \"columns\": susy-repeat(8),\n  \"gutters\": 1em,\n);\n\n@include susy-at($medium) {\n  // 使用 susy-at mixin 與變數建立新斷點\n}</code></pre><h3 id=\"3-gallery\">3. <code>gallery</code></h3>\n<pre class=\"language-scss\"><code class=\"language-scss\">// https://github.com/oddbird/susy/issues/648\n@mixin gallery($span, $config: ()) {\n  $grid: susy-compile($span, $config);\n  $span: map-get($grid, \"span\");\n  $column-count: length(map-get($grid, \"columns\"));\n  $count: floor($column-count / $span);\n  $spread: map-get($grid, \"spread\") + 2;\n  $container-spread: map-get($grid, \"container-spread\") + 2;\n  $extra: ($container-spread - $spread) * 0.5;\n  $extra-push: su-call(\"su-gutter\", $grid) * $extra;\n\n  float: left;\n  margin-right: -100%;\n\n  @for $n from 1 through ($count) {\n    $nth: unquote(\"#{$count}n + #{$n}\");\n    $location: $span * ($n - 1) + 1;\n\n    &amp;:nth-child(#{$nth}) {\n      $width: susy-compile($span at $location, $grid);\n      width: su-call(\"su-span\", $width);\n\n      @if ($location > 1) {\n        $wide: susy-compile(\"first\" $location - 1 \"wide\", $grid);\n        clear: none;\n        margin-left: su-call(\"su-span\", $wide) + $extra-push;\n      } @else {\n        clear: both;\n        margin-left: if($extra-push > 0, $extra-push, 0);\n      }\n    }\n  }\n}</code></pre>","date":"2019-11-09T00:32:49.000Z","excerpt":null,"printDate":"November 9, 2019","printReadingTime":"3 min read"}